// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "sidechain_gate_widget.h"

void SidechainGateUI::cb_attack_i(psiDialX* o, void*) {
  attack_out->value(o->value());
adsr_box->attack(attack->value());
writePort( int(SCGATE_ATTACK),o->value());
}
void SidechainGateUI::cb_attack(psiDialX* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_attack_i(o,v);
}

void SidechainGateUI::cb_hold_i(psiDialX* o, void*) {
  hold_out->value(o->value());
adsr_box->sustain(hold->value());
writePort( int(SCGATE_HOLD),o->value());
}
void SidechainGateUI::cb_hold(psiDialX* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_hold_i(o,v);
}

void SidechainGateUI::cb_release_i(psiDialX* o, void*) {
  release_out->value(o->value());
adsr_box->release(release_out->value());
writePort( int(SCGATE_DECAY),o->value());
}
void SidechainGateUI::cb_release(psiDialX* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_release_i(o,v);
}

void SidechainGateUI::cb_attack_out_i(Fl_Value_Input* o, void*) {
  attack->value(o->value());
writePort( int(SCGATE_ATTACK),o->value());
adsr_box->attack(attack->value());
}
void SidechainGateUI::cb_attack_out(Fl_Value_Input* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_attack_out_i(o,v);
}

void SidechainGateUI::cb_hold_out_i(Fl_Value_Input* o, void*) {
  hold->value(o->value());
adsr_box->sustain(hold->value());
writePort( int(SCGATE_HOLD),o->value());
}
void SidechainGateUI::cb_hold_out(Fl_Value_Input* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_hold_out_i(o,v);
}

void SidechainGateUI::cb_release_out_i(Fl_Value_Input* o, void*) {
  release->value(o->value());
adsr_box->release(release->value());
writePort( int(SCGATE_DECAY),o->value());
}
void SidechainGateUI::cb_release_out(Fl_Value_Input* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_release_out_i(o,v);
}

void SidechainGateUI::cb_threshold_i(Fl_Slider* o, void*) {
  threshold_out->value(o->value());
writePort( int(SCGATE_THRESHOLD),o->value());
if (o->value()<hysterisis->value()) {
   hysterisis->value(o->value());   
   hysterisis->do_callback();
};
}
void SidechainGateUI::cb_threshold(Fl_Slider* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_threshold_i(o,v);
}

void SidechainGateUI::cb_hysterisis_i(Fl_Slider* o, void*) {
  hysterisis_out->value(o->value());
writePort( int(SCGATE_HYSTER),o->value());
if (o->value()>threshold->value()) {
   threshold->value(o->value());   
   threshold->do_callback();
};
}
void SidechainGateUI::cb_hysterisis(Fl_Slider* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_hysterisis_i(o,v);
}

void SidechainGateUI::cb_range_i(Fl_Slider* o, void*) {
  range_out->value(o->value());
adsr_box->set_range(range->value());
writePort( int(SCGATE_RANGE),o->value());
}
void SidechainGateUI::cb_range(Fl_Slider* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_range_i(o,v);
}

void SidechainGateUI::cb_threshold_out_i(Fl_Value_Input* o, void*) {
  threshold->value(o->value());
writePort( int(SCGATE_THRESHOLD),o->value());
}
void SidechainGateUI::cb_threshold_out(Fl_Value_Input* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_threshold_out_i(o,v);
}

void SidechainGateUI::cb_hysterisis_out_i(Fl_Value_Input* o, void*) {
  hysterisis->value(o->value());
writePort( int(SCGATE_HYSTER),o->value());
}
void SidechainGateUI::cb_hysterisis_out(Fl_Value_Input* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_hysterisis_out_i(o,v);
}

void SidechainGateUI::cb_range_out_i(Fl_Value_Input* o, void*) {
  range->value(o->value());
adsr_box->set_range(range_out->value());
writePort( int(SCGATE_RANGE),o->value());
if (o->value()>threshold->value()) {
   threshold->value(o->value());	
   threshold->do_callback();
};
}
void SidechainGateUI::cb_range_out(Fl_Value_Input* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_range_out_i(o,v);
}

void SidechainGateUI::cb_select_l_i(Fl_Light_Button* o, void*) {
  if (o->value()==1) {
   writePort(int(SCGATE_SELECT),-1.0f);
   select_g->value(0);    
   select_b->value(0);    
} else {
   writePort(int(SCGATE_SELECT),0.0f);
   select_g->value(1);    
   select_g->do_callback();
   select_b->value(0);    
};
}
void SidechainGateUI::cb_select_l(Fl_Light_Button* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_select_l_i(o,v);
}

void SidechainGateUI::cb_select_g_i(Fl_Light_Button* o, void*) {
  if (o->value()==1) {
   writePort(int(SCGATE_SELECT),0.0f);
   select_l->value(0);    
   select_b->value(0);    
} else {
   writePort(int(SCGATE_SELECT),1.0f);
   select_l->value(0);    
   select_b->value(1);    
   select_b->do_callback();
};
}
void SidechainGateUI::cb_select_g(Fl_Light_Button* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_select_g_i(o,v);
}

void SidechainGateUI::cb_select_b_i(Fl_Light_Button* o, void*) {
  if (o->value()==1) {
   writePort(int(SCGATE_SELECT),1.0f);
   select_g->value(0);    
   select_l->value(0);    
} else {
   writePort(int(SCGATE_SELECT),0.0f);
   select_g->value(1);
   select_g->do_callback();
   select_l->value(0);    
};
}
void SidechainGateUI::cb_select_b(Fl_Light_Button* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_select_b_i(o,v);
}

void SidechainGateUI::cb_chain_bal_side_i(Fl_Light_Button* o, void*) {
  if (o->value()==1) {
   writePort(int(SCGATE_CHAIN_BAL),1.0f);
   chain_bal_in->value(0);   
} else {
   writePort(int(SCGATE_CHAIN_BAL),0.0f);
   chain_bal_in->value(1);   
};
}
void SidechainGateUI::cb_chain_bal_side(Fl_Light_Button* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_chain_bal_side_i(o,v);
}

void SidechainGateUI::cb_chain_bal_in_i(Fl_Light_Button* o, void*) {
  if (o->value()==1) {
   writePort(int(SCGATE_CHAIN_BAL),0.0f);
   chain_bal_side->value(0);   
} else {
   writePort(int(SCGATE_CHAIN_BAL),1.0f);
   chain_bal_side->value(1);   
};
}
void SidechainGateUI::cb_chain_bal_in(Fl_Light_Button* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_chain_bal_in_i(o,v);
}

void SidechainGateUI::cb_hf_fc_i(psiDialX* o, void*) {
  hf_fc_out->value(o->value());
writePort( int(SCGATE_HF),o->value());
}
void SidechainGateUI::cb_hf_fc(psiDialX* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_hf_fc_i(o,v);
}

void SidechainGateUI::cb_hf_fc_out_i(Fl_Value_Input* o, void*) {
  hf_fc_out->value(o->value());
writePort( int(SCGATE_HF),o->value());
}
void SidechainGateUI::cb_hf_fc_out(Fl_Value_Input* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_hf_fc_out_i(o,v);
}

void SidechainGateUI::cb_lf_fc_i(psiDialX* o, void*) {
  lf_fc_out->value(o->value());
writePort( int(SCGATE_LF),o->value());
}
void SidechainGateUI::cb_lf_fc(psiDialX* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_lf_fc_i(o,v);
}

void SidechainGateUI::cb_lf_fc_out_i(Fl_Value_Input* o, void*) {
  lf_fc->value(o->value());
writePort( int(SCGATE_LF),o->value());
}
void SidechainGateUI::cb_lf_fc_out(Fl_Value_Input* o, void* v) {
  ((SidechainGateUI*)(o->parent()->parent()->user_data()))->cb_lf_fc_out_i(o,v);
}

void SidechainGateUI::update_button(int button) {
}

SidechainGateUI::SidechainGateUI() {
  { window = new Fl_Double_Window(720, 265, "Sidechain Gate");
    window->color((Fl_Color)48);
    window->user_data((void*)(this));
    { psiLabelBox* o = lbox = new psiLabelBox(0, 0, 720, 265, "psi Sidechain Gate");
      lbox->box(FL_NO_BOX);
      lbox->color((Fl_Color)48);
      lbox->selection_color((Fl_Color)80);
      lbox->labeltype(FL_NORMAL_LABEL);
      lbox->labelfont(0);
      lbox->labelsize(14);
      lbox->labelcolor(FL_FOREGROUND_COLOR);
      lbox->align(Fl_Align(FL_ALIGN_CENTER));
      lbox->when(FL_WHEN_RELEASE);
      o->label_align( 125, 15, LBL_LEFT, 5, 10, BOX_NORMAL);
    } // psiLabelBox* lbox
    { Fl_Group* o = new Fl_Group(190, 20, 525, 240);
      o->box(FL_ROUNDED_BOX);
      o->selection_color(FL_LIGHT1);
      { psi::Envelope* o = adsr_box = new psi::Envelope(210, 45, 310, 110);
        adsr_box->box(FL_THIN_UP_BOX);
        adsr_box->color(FL_BACKGROUND_COLOR);
        adsr_box->selection_color(FL_BACKGROUND_COLOR);
        adsr_box->labeltype(FL_NO_LABEL);
        adsr_box->labelfont(0);
        adsr_box->labelsize(14);
        adsr_box->labelcolor(FL_FOREGROUND_COLOR);
        adsr_box->align(Fl_Align(514));
        adsr_box->when(FL_WHEN_RELEASE);
        o->set_range(-70.0f,20.0f,7000.0f,-25.0f);
      } // psi::Envelope* adsr_box
      { attack = new psiDialX(225, 165, 50, 50, "Attack");
        attack->box(FL_NO_BOX);
        attack->color(FL_DARK_RED);
        attack->selection_color(FL_INACTIVE_COLOR);
        attack->labeltype(FL_NORMAL_LABEL);
        attack->labelfont(0);
        attack->labelsize(10);
        attack->labelcolor(FL_FOREGROUND_COLOR);
        attack->maximum(1000);
        attack->step(1);
        attack->value(2);
        attack->callback((Fl_Callback*)cb_attack);
        attack->align(Fl_Align(FL_ALIGN_BOTTOM));
        attack->when(FL_WHEN_CHANGED);
      } // psiDialX* attack
      { hold = new psiDialX(300, 165, 50, 50, "Hold");
        hold->box(FL_NO_BOX);
        hold->color(FL_DARK_RED);
        hold->selection_color(FL_INACTIVE_COLOR);
        hold->labeltype(FL_NORMAL_LABEL);
        hold->labelfont(0);
        hold->labelsize(10);
        hold->labelcolor(FL_FOREGROUND_COLOR);
        hold->maximum(2000);
        hold->step(1);
        hold->value(100);
        hold->callback((Fl_Callback*)cb_hold);
        hold->align(Fl_Align(FL_ALIGN_BOTTOM));
        hold->when(FL_WHEN_CHANGED);
      } // psiDialX* hold
      { release = new psiDialX(375, 165, 50, 50, "Release");
        release->box(FL_NO_BOX);
        release->color(FL_DARK_RED);
        release->selection_color(FL_INACTIVE_COLOR);
        release->labeltype(FL_NORMAL_LABEL);
        release->labelfont(0);
        release->labelsize(10);
        release->labelcolor(FL_FOREGROUND_COLOR);
        release->minimum(1);
        release->maximum(4000);
        release->step(1);
        release->value(10);
        release->callback((Fl_Callback*)cb_release);
        release->align(Fl_Align(FL_ALIGN_BOTTOM));
        release->when(FL_WHEN_CHANGED);
      } // psiDialX* release
      { Fl_Value_Input* o = attack_out = new Fl_Value_Input(230, 230, 40, 20);
        attack_out->box(FL_DOWN_BOX);
        attack_out->color(FL_BACKGROUND2_COLOR);
        attack_out->selection_color(FL_SELECTION_COLOR);
        attack_out->labeltype(FL_NORMAL_LABEL);
        attack_out->labelfont(0);
        attack_out->labelsize(14);
        attack_out->labelcolor(FL_FOREGROUND_COLOR);
        attack_out->maximum(1000);
        attack_out->step(1);
        attack_out->value(10);
        attack_out->textsize(10);
        attack_out->callback((Fl_Callback*)cb_attack_out);
        attack_out->align(Fl_Align(FL_ALIGN_RIGHT));
        attack_out->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Value_Input* attack_out
      { Fl_Value_Input* o = hold_out = new Fl_Value_Input(306, 230, 40, 20);
        hold_out->box(FL_DOWN_BOX);
        hold_out->color(FL_BACKGROUND2_COLOR);
        hold_out->selection_color(FL_SELECTION_COLOR);
        hold_out->labeltype(FL_NORMAL_LABEL);
        hold_out->labelfont(0);
        hold_out->labelsize(14);
        hold_out->labelcolor(FL_FOREGROUND_COLOR);
        hold_out->maximum(2000);
        hold_out->step(1);
        hold_out->value(100);
        hold_out->textsize(10);
        hold_out->callback((Fl_Callback*)cb_hold_out);
        hold_out->align(Fl_Align(FL_ALIGN_RIGHT));
        hold_out->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Value_Input* hold_out
      { Fl_Value_Input* o = release_out = new Fl_Value_Input(380, 230, 40, 20);
        release_out->box(FL_DOWN_BOX);
        release_out->color(FL_BACKGROUND2_COLOR);
        release_out->selection_color(FL_SELECTION_COLOR);
        release_out->labeltype(FL_NORMAL_LABEL);
        release_out->labelfont(0);
        release_out->labelsize(14);
        release_out->labelcolor(FL_FOREGROUND_COLOR);
        release_out->maximum(2000);
        release_out->step(1);
        release_out->value(100);
        release_out->textsize(10);
        release_out->callback((Fl_Callback*)cb_release_out);
        release_out->align(Fl_Align(FL_ALIGN_RIGHT));
        release_out->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Value_Input* release_out
      { Fl_Slider* o = threshold = new Fl_Slider(540, 50, 20, 180);
        threshold->box(FL_ROUND_UP_BOX);
        threshold->color(FL_BACKGROUND_COLOR);
        threshold->selection_color(FL_BACKGROUND_COLOR);
        threshold->labeltype(FL_NORMAL_LABEL);
        threshold->labelfont(0);
        threshold->labelsize(10);
        threshold->labelcolor(FL_FOREGROUND_COLOR);
        threshold->minimum(20);
        threshold->maximum(-70);
        threshold->step(1);
        threshold->value(-25);
        threshold->callback((Fl_Callback*)cb_threshold);
        threshold->align(Fl_Align(FL_ALIGN_TOP));
        threshold->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Slider* threshold
      { Fl_Slider* o = hysterisis = new Fl_Slider(580, 50, 20, 180);
        hysterisis->box(FL_ROUND_UP_BOX);
        hysterisis->color(FL_BACKGROUND_COLOR);
        hysterisis->selection_color(FL_BACKGROUND_COLOR);
        hysterisis->labeltype(FL_NORMAL_LABEL);
        hysterisis->labelfont(0);
        hysterisis->labelsize(10);
        hysterisis->labelcolor(FL_FOREGROUND_COLOR);
        hysterisis->minimum(20);
        hysterisis->maximum(-70);
        hysterisis->step(1);
        hysterisis->value(-25);
        hysterisis->callback((Fl_Callback*)cb_hysterisis);
        hysterisis->align(Fl_Align(FL_ALIGN_TOP));
        hysterisis->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Slider* hysterisis
      { Fl_Slider* o = range = new Fl_Slider(620, 50, 20, 180);
        range->box(FL_ROUND_UP_BOX);
        range->color(FL_BACKGROUND_COLOR);
        range->selection_color(FL_BACKGROUND_COLOR);
        range->labeltype(FL_NORMAL_LABEL);
        range->labelfont(0);
        range->labelsize(10);
        range->labelcolor(FL_FOREGROUND_COLOR);
        range->minimum(20);
        range->maximum(-70);
        range->step(1);
        range->value(-25);
        range->callback((Fl_Callback*)cb_range);
        range->align(Fl_Align(FL_ALIGN_TOP));
        range->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Slider* range
      { Fl_Value_Input* o = threshold_out = new Fl_Value_Input(540, 225, 20, 20);
        threshold_out->box(FL_DOWN_BOX);
        threshold_out->color(FL_BACKGROUND2_COLOR);
        threshold_out->selection_color(FL_SELECTION_COLOR);
        threshold_out->labeltype(FL_NORMAL_LABEL);
        threshold_out->labelfont(0);
        threshold_out->labelsize(14);
        threshold_out->labelcolor(FL_FOREGROUND_COLOR);
        threshold_out->minimum(20);
        threshold_out->maximum(-70);
        threshold_out->step(1);
        threshold_out->value(-25);
        threshold_out->textsize(10);
        threshold_out->callback((Fl_Callback*)cb_threshold_out);
        threshold_out->align(Fl_Align(FL_ALIGN_RIGHT));
        threshold_out->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Value_Input* threshold_out
      { Fl_Value_Input* o = hysterisis_out = new Fl_Value_Input(580, 225, 20, 20);
        hysterisis_out->box(FL_DOWN_BOX);
        hysterisis_out->color(FL_BACKGROUND2_COLOR);
        hysterisis_out->selection_color(FL_SELECTION_COLOR);
        hysterisis_out->labeltype(FL_NORMAL_LABEL);
        hysterisis_out->labelfont(0);
        hysterisis_out->labelsize(14);
        hysterisis_out->labelcolor(FL_FOREGROUND_COLOR);
        hysterisis_out->minimum(20);
        hysterisis_out->maximum(-70);
        hysterisis_out->step(1);
        hysterisis_out->value(-25);
        hysterisis_out->textsize(10);
        hysterisis_out->callback((Fl_Callback*)cb_hysterisis_out);
        hysterisis_out->align(Fl_Align(FL_ALIGN_RIGHT));
        hysterisis_out->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Value_Input* hysterisis_out
      { Fl_Value_Input* o = range_out = new Fl_Value_Input(620, 225, 20, 20);
        range_out->box(FL_DOWN_BOX);
        range_out->color(FL_BACKGROUND2_COLOR);
        range_out->selection_color(FL_SELECTION_COLOR);
        range_out->labeltype(FL_NORMAL_LABEL);
        range_out->labelfont(0);
        range_out->labelsize(14);
        range_out->labelcolor(FL_FOREGROUND_COLOR);
        range_out->minimum(20);
        range_out->maximum(-70);
        range_out->step(1);
        range_out->value(-25);
        range_out->textsize(10);
        range_out->callback((Fl_Callback*)cb_range_out);
        range_out->align(Fl_Align(FL_ALIGN_RIGHT));
        range_out->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Value_Input* range_out
      { Fl_Light_Button* o = gate_state = new Fl_Light_Button(450, 165, 70, 20, "Open");
        gate_state->box(FL_ROUND_UP_BOX);
        gate_state->value(1);
        gate_state->selection_color((Fl_Color)93);
        gate_state->labelsize(10);
        gate_state->when(FL_WHEN_RELEASE_ALWAYS);
        o->visible_focus(0);
      } // Fl_Light_Button* gate_state
      { Fl_Light_Button* o = select_l = new Fl_Light_Button(450, 190, 70, 20, "Input");
        select_l->box(FL_ROUND_UP_BOX);
        select_l->value(1);
        select_l->selection_color(FL_DARK_RED);
        select_l->labelsize(10);
        select_l->callback((Fl_Callback*)cb_select_l);
        select_l->when(FL_WHEN_RELEASE_ALWAYS);
        o->visible_focus(0);
      } // Fl_Light_Button* select_l
      { Fl_Light_Button* o = select_g = new Fl_Light_Button(450, 210, 70, 20, "Gate");
        select_g->box(FL_ROUND_UP_BOX);
        select_g->value(1);
        select_g->selection_color(FL_DARK_RED);
        select_g->labelsize(10);
        select_g->callback((Fl_Callback*)cb_select_g);
        select_g->when(FL_WHEN_RELEASE_ALWAYS);
        o->visible_focus(0);
      } // Fl_Light_Button* select_g
      { Fl_Light_Button* o = select_b = new Fl_Light_Button(450, 230, 70, 20, "Bypass");
        select_b->box(FL_ROUND_UP_BOX);
        select_b->value(1);
        select_b->selection_color(FL_DARK_RED);
        select_b->labelsize(10);
        select_b->callback((Fl_Callback*)cb_select_b);
        select_b->when(FL_WHEN_RELEASE_ALWAYS);
        o->visible_focus(0);
      } // Fl_Light_Button* select_b
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(5, 20, 180, 240);
      o->box(FL_ROUNDED_BOX);
      o->selection_color((Fl_Color)51);
      { Fl_Box* o = new Fl_Box(35, 30, 35, 16, "Input Select:");
        o->labelsize(10);
      } // Fl_Box* o
      { Fl_Light_Button* o = chain_bal_side = new Fl_Light_Button(100, 30, 70, 20, "Sidechain");
        chain_bal_side->tooltip("Open the gate on MIDI Note On");
        chain_bal_side->value(1);
        chain_bal_side->selection_color((Fl_Color)80);
        chain_bal_side->labelsize(10);
        chain_bal_side->callback((Fl_Callback*)cb_chain_bal_side);
        o->visible_focus(0);
      } // Fl_Light_Button* chain_bal_side
      { Fl_Light_Button* o = chain_bal_in = new Fl_Light_Button(100, 50, 70, 20, "Internal");
        chain_bal_in->tooltip("Open the gate on MIDI Note On");
        chain_bal_in->value(1);
        chain_bal_in->selection_color((Fl_Color)80);
        chain_bal_in->labelsize(10);
        chain_bal_in->callback((Fl_Callback*)cb_chain_bal_in);
        o->visible_focus(0);
      } // Fl_Light_Button* chain_bal_in
      { hf_fc = new psiDialX(25, 75, 50, 50, "Hi Cut");
        hf_fc->box(FL_NO_BOX);
        hf_fc->color(FL_DARK_RED);
        hf_fc->selection_color(FL_INACTIVE_COLOR);
        hf_fc->labeltype(FL_NORMAL_LABEL);
        hf_fc->labelfont(0);
        hf_fc->labelsize(10);
        hf_fc->labelcolor(FL_FOREGROUND_COLOR);
        hf_fc->minimum(250);
        hf_fc->maximum(20000);
        hf_fc->step(1);
        hf_fc->value(2000);
        hf_fc->callback((Fl_Callback*)cb_hf_fc);
        hf_fc->align(Fl_Align(FL_ALIGN_BOTTOM));
        hf_fc->when(FL_WHEN_CHANGED);
      } // psiDialX* hf_fc
      { psi::PeakMeter* o = level_left = new psi::PeakMeter(115, 75, 20, 155);
        level_left->box(FL_ROUND_UP_BOX);
        level_left->color(FL_BACKGROUND_COLOR);
        level_left->selection_color(FL_BACKGROUND_COLOR);
        level_left->labeltype(FL_NORMAL_LABEL);
        level_left->labelfont(0);
        level_left->labelsize(10);
        level_left->labelcolor(FL_FOREGROUND_COLOR);
        level_left->minimum(6);
        level_left->maximum(-70);
        level_left->step(1);
        level_left->value(-70);
        level_left->align(Fl_Align(FL_ALIGN_TOP));
        level_left->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // psi::PeakMeter* level_left
      { psi::PeakMeter* o = level_right = new psi::PeakMeter(135, 75, 20, 155);
        level_right->box(FL_ROUND_UP_BOX);
        level_right->color(FL_BACKGROUND_COLOR);
        level_right->selection_color(FL_BACKGROUND_COLOR);
        level_right->labeltype(FL_NORMAL_LABEL);
        level_right->labelfont(0);
        level_right->labelsize(10);
        level_right->labelcolor(FL_FOREGROUND_COLOR);
        level_right->minimum(6);
        level_right->maximum(-70);
        level_right->step(1);
        level_right->value(-70);
        level_right->align(Fl_Align(FL_ALIGN_TOP));
        level_right->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // psi::PeakMeter* level_right
      { Fl_Value_Input* o = hf_fc_out = new Fl_Value_Input(30, 140, 40, 20);
        hf_fc_out->box(FL_DOWN_BOX);
        hf_fc_out->color(FL_BACKGROUND2_COLOR);
        hf_fc_out->selection_color(FL_SELECTION_COLOR);
        hf_fc_out->labeltype(FL_NORMAL_LABEL);
        hf_fc_out->labelfont(0);
        hf_fc_out->labelsize(14);
        hf_fc_out->labelcolor(FL_FOREGROUND_COLOR);
        hf_fc_out->minimum(250);
        hf_fc_out->maximum(20000);
        hf_fc_out->step(1);
        hf_fc_out->value(2000);
        hf_fc_out->textsize(10);
        hf_fc_out->callback((Fl_Callback*)cb_hf_fc_out);
        hf_fc_out->align(Fl_Align(FL_ALIGN_RIGHT));
        hf_fc_out->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Value_Input* hf_fc_out
      { lf_fc = new psiDialX(25, 160, 50, 50, "Low Cut");
        lf_fc->box(FL_NO_BOX);
        lf_fc->color(FL_DARK_RED);
        lf_fc->selection_color(FL_INACTIVE_COLOR);
        lf_fc->labeltype(FL_NORMAL_LABEL);
        lf_fc->labelfont(0);
        lf_fc->labelsize(10);
        lf_fc->labelcolor(FL_FOREGROUND_COLOR);
        lf_fc->minimum(25);
        lf_fc->maximum(4000);
        lf_fc->step(1);
        lf_fc->value(500);
        lf_fc->callback((Fl_Callback*)cb_lf_fc);
        lf_fc->align(Fl_Align(FL_ALIGN_BOTTOM));
        lf_fc->when(FL_WHEN_CHANGED);
      } // psiDialX* lf_fc
      { Fl_Value_Input* o = lf_fc_out = new Fl_Value_Input(30, 230, 40, 20);
        lf_fc_out->box(FL_DOWN_BOX);
        lf_fc_out->color(FL_BACKGROUND2_COLOR);
        lf_fc_out->selection_color(FL_SELECTION_COLOR);
        lf_fc_out->labeltype(FL_NORMAL_LABEL);
        lf_fc_out->labelfont(0);
        lf_fc_out->labelsize(14);
        lf_fc_out->labelcolor(FL_FOREGROUND_COLOR);
        lf_fc_out->minimum(25);
        lf_fc_out->maximum(4000);
        lf_fc_out->step(1);
        lf_fc_out->value(500);
        lf_fc_out->textsize(10);
        lf_fc_out->callback((Fl_Callback*)cb_lf_fc_out);
        lf_fc_out->align(Fl_Align(FL_ALIGN_RIGHT));
        lf_fc_out->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Value_Input* lf_fc_out
      { Fl_Value_Input* o = level_left_out = new Fl_Value_Input(115, 230, 20, 20);
        level_left_out->box(FL_DOWN_BOX);
        level_left_out->color(FL_BACKGROUND_COLOR);
        level_left_out->selection_color(FL_BACKGROUND_COLOR);
        level_left_out->labeltype(FL_NORMAL_LABEL);
        level_left_out->labelfont(0);
        level_left_out->labelsize(14);
        level_left_out->labelcolor(FL_FOREGROUND_COLOR);
        level_left_out->minimum(-70);
        level_left_out->maximum(6);
        level_left_out->step(1);
        level_left_out->value(-70);
        level_left_out->textsize(10);
        level_left_out->align(Fl_Align(FL_ALIGN_BOTTOM_RIGHT));
        level_left_out->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Value_Input* level_left_out
      { Fl_Value_Input* o = level_right_out = new Fl_Value_Input(135, 230, 20, 20);
        level_right_out->box(FL_DOWN_BOX);
        level_right_out->color(FL_BACKGROUND_COLOR);
        level_right_out->selection_color(FL_BACKGROUND_COLOR);
        level_right_out->labeltype(FL_NORMAL_LABEL);
        level_right_out->labelfont(0);
        level_right_out->labelsize(14);
        level_right_out->labelcolor(FL_FOREGROUND_COLOR);
        level_right_out->minimum(-70);
        level_right_out->maximum(6);
        level_right_out->step(1);
        level_right_out->value(-70);
        level_right_out->textsize(10);
        level_right_out->align(Fl_Align(FL_ALIGN_BOTTOM_RIGHT));
        level_right_out->when(FL_WHEN_CHANGED);
        o->visible_focus(0);
      } // Fl_Value_Input* level_right_out
      o->end();
    } // Fl_Group* o
    { psi::PeakMeter* o = out_level_left = new psi::PeakMeter(660, 50, 20, 180);
      out_level_left->box(FL_ROUND_UP_BOX);
      out_level_left->color(FL_BACKGROUND_COLOR);
      out_level_left->selection_color(FL_BACKGROUND_COLOR);
      out_level_left->labeltype(FL_NORMAL_LABEL);
      out_level_left->labelfont(0);
      out_level_left->labelsize(10);
      out_level_left->labelcolor(FL_FOREGROUND_COLOR);
      out_level_left->minimum(20);
      out_level_left->maximum(-70);
      out_level_left->step(1);
      out_level_left->value(-25);
      out_level_left->align(Fl_Align(FL_ALIGN_TOP));
      out_level_left->when(FL_WHEN_CHANGED);
      o->visible_focus(0);
    } // psi::PeakMeter* out_level_left
    { psi::PeakMeter* o = out_level_right = new psi::PeakMeter(680, 50, 20, 180);
      out_level_right->box(FL_ROUND_UP_BOX);
      out_level_right->color(FL_BACKGROUND_COLOR);
      out_level_right->selection_color(FL_BACKGROUND_COLOR);
      out_level_right->labeltype(FL_NORMAL_LABEL);
      out_level_right->labelfont(0);
      out_level_right->labelsize(10);
      out_level_right->labelcolor(FL_FOREGROUND_COLOR);
      out_level_right->minimum(20);
      out_level_right->maximum(-70);
      out_level_right->step(1);
      out_level_right->value(-25);
      out_level_right->align(Fl_Align(FL_ALIGN_TOP));
      out_level_right->when(FL_WHEN_CHANGED);
      o->visible_focus(0);
    } // psi::PeakMeter* out_level_right
    { Fl_Value_Input* o = out_level_left_out = new Fl_Value_Input(660, 225, 20, 20);
      out_level_left_out->box(FL_DOWN_BOX);
      out_level_left_out->color(FL_BACKGROUND_COLOR);
      out_level_left_out->selection_color(FL_BACKGROUND_COLOR);
      out_level_left_out->labeltype(FL_NORMAL_LABEL);
      out_level_left_out->labelfont(0);
      out_level_left_out->labelsize(14);
      out_level_left_out->labelcolor(FL_FOREGROUND_COLOR);
      out_level_left_out->minimum(-70);
      out_level_left_out->maximum(6);
      out_level_left_out->step(1);
      out_level_left_out->value(-70);
      out_level_left_out->textsize(10);
      out_level_left_out->align(Fl_Align(FL_ALIGN_BOTTOM_RIGHT));
      out_level_left_out->when(FL_WHEN_CHANGED);
      o->visible_focus(0);
    } // Fl_Value_Input* out_level_left_out
    { Fl_Value_Input* o = out_level_right_out = new Fl_Value_Input(680, 225, 20, 20);
      out_level_right_out->box(FL_DOWN_BOX);
      out_level_right_out->color(FL_BACKGROUND_COLOR);
      out_level_right_out->selection_color(FL_BACKGROUND_COLOR);
      out_level_right_out->labeltype(FL_NORMAL_LABEL);
      out_level_right_out->labelfont(0);
      out_level_right_out->labelsize(14);
      out_level_right_out->labelcolor(FL_FOREGROUND_COLOR);
      out_level_right_out->minimum(-70);
      out_level_right_out->maximum(6);
      out_level_right_out->step(1);
      out_level_right_out->value(-70);
      out_level_right_out->textsize(10);
      out_level_right_out->align(Fl_Align(FL_ALIGN_BOTTOM_RIGHT));
      out_level_right_out->when(FL_WHEN_CHANGED);
      o->visible_focus(0);
    } // Fl_Value_Input* out_level_right_out
    { Fl_Box* o = new Fl_Box(535, 29, 35, 16, "Thresh");
      o->labelsize(10);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(575, 29, 35, 16, "Hyster");
      o->labelsize(10);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(615, 29, 35, 16, "Range");
      o->labelsize(10);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(663, 29, 35, 16, "Out dB");
      o->labelsize(10);
    } // Fl_Box* o
    Fl_Theme::set( "Gleam");
          Fl_Tooltip::color(FL_BLACK);
          Fl_Tooltip::textcolor(221);
          Fl_Tooltip::size(11);

          Fl_Dial::default_style(Fl_Dial::PIXMAP_DIAL);
          Fl_PNG_Image* dial_image = new Fl_PNG_Image( LV2_DIR "/sidechain_gate-psi.lv2/knob.png");
          Fl_Image* dimage = dial_image->copy();
          psiDialX::default_image(dimage);
    window->end();
    window->resizable(window);
  } // Fl_Double_Window* window
}

void SidechainGateUI::idle() {
  Fl::check();
  Fl::flush();
}

int SidechainGateUI::getWidth() {
  return window->w();
}

int SidechainGateUI::getHeight() {
  return window->h();
}

void SidechainGateUI::writePort(int port, float value) {
  write_function(controller, port, sizeof(float), 0, &value);
}
