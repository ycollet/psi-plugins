// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef midi_gate_widget_h
#define midi_gate_widget_h
#include <FL/Fl.H>
#include "lv2/lv2plug.in/ns/extensions/ui/ui.h"
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Dial.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Fill_Slider.H>
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_Tooltip.H>
#include "UI/Envelope.H"
#include "UI/psiDialX.H"
#include "UI/PeakMeter.H"
#include "UI/psiLabelBox.H"
#include "midi_gate.h"
#include <math.h>
#ifndef LV2_DIR 
#define LV2_DIR "/usr/lib64/lv2" 
#endif
#include <FL/Fl_Double_Window.H>
using namespace std;
#include <FL/Fl_Box.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Output.H>

class MidiGateUI {
public:
  void update_button(int button);
  MidiGateUI();
  Fl_Double_Window *window;
  psiDialX *hold;
private:
  void cb_hold_i(psiDialX*, void*);
  static void cb_hold(psiDialX*, void*);
public:
  psiDialX *attack;
private:
  void cb_attack_i(psiDialX*, void*);
  static void cb_attack(psiDialX*, void*);
public:
  psiDialX *release;
private:
  void cb_release_i(psiDialX*, void*);
  static void cb_release(psiDialX*, void*);
public:
  Fl_Value_Input *attack_out;
private:
  void cb_attack_out_i(Fl_Value_Input*, void*);
  static void cb_attack_out(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *hold_out;
private:
  void cb_hold_out_i(Fl_Value_Input*, void*);
  static void cb_hold_out(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *release_out;
private:
  void cb_release_out_i(Fl_Value_Input*, void*);
  static void cb_release_out(Fl_Value_Input*, void*);
public:
  Fl_Slider *range;
private:
  void cb_range_i(Fl_Slider*, void*);
  static void cb_range(Fl_Slider*, void*);
public:
  Fl_Light_Button *noteon;
private:
  void cb_noteon_i(Fl_Light_Button*, void*);
  static void cb_noteon(Fl_Light_Button*, void*);
public:
  psi::PeakMeter *level;
  Fl_Light_Button *noteoff;
private:
  void cb_noteoff_i(Fl_Light_Button*, void*);
  static void cb_noteoff(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *gate_state;
  Fl_Light_Button *select;
private:
  void cb_select_i(Fl_Light_Button*, void*);
  static void cb_select(Fl_Light_Button*, void*);
public:
  psi::Envelope *adsr_box;
  Fl_Value_Input *range_out;
private:
  void cb_range_out_i(Fl_Value_Input*, void*);
  static void cb_range_out(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *level_out;
  LV2UI_Write_Function write_function; 
  LV2UI_Controller controller; 
  void idle();
  int getWidth();
  int getHeight();
private:
  float gain; 
  float cutoff; 
  float Q; 
public:
  void writePort(int port, float value);
#include <FL/Fl_Slider.H>
};
#include <FL/Fl_Theme.H>
#endif
