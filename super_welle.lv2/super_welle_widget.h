// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef super_welle_widget_h
#define super_welle_widget_h
#include <FL/Fl.H>
#include <math.h>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Int_Input.H>
#include <FL/Fl_Dial.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Fill_Slider.H>
#include <FL/Fl_XPM_Image.H>
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_Menu_Item.H>
#include <FL/Fl_Theme.H>
#include <FL/Fl_Tooltip.H>
#include "UI/Envelope.H"
#include "UI/psiDialX.H"
#include "UI/psiLabelBox.H"
#include "UI/PeakMeter.H"
#include "UI/Fader.H"
#include "UI/psiLFO.H"
#include "UI/psiENV.H"
#include "UI/psiDialX_Mod.H"
#include "super_welle.h"
#include "UI/psiMidiMapping.H"
#include "common/voice_params.h"
    #include "lv2/lv2plug.in/ns/extensions/ui/ui.h"
#define UI_CLASS SuperWelleUI
#ifndef LV2_DIR 
#define LV2_DIR "/usr/lib64/lv2" 
#endif
using namespace std;
#include <FL/Fl_Box.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Output.H>

class SuperWelleUI {
public:
  void update_button(int button);
  SuperWelleUI();
  Fl_Double_Window *window;
  psiLabelBox *mainbox;
  psiDialX *osc1_wave;
private:
  void cb_osc1_wave_i(psiDialX*, void*);
  static void cb_osc1_wave(psiDialX*, void*);
public:
  psiDialX *osc1_distortion;
private:
  void cb_osc1_distortion_i(psiDialX*, void*);
  static void cb_osc1_distortion(psiDialX*, void*);
public:
  psiDialX *polyphony;
private:
  void cb_polyphony_i(psiDialX*, void*);
  static void cb_polyphony(psiDialX*, void*);
public:
  psiDialX *glide;
private:
  void cb_glide_i(psiDialX*, void*);
  static void cb_glide(psiDialX*, void*);
public:
  psiDialX *feedback_l;
private:
  void cb_feedback_l_i(psiDialX*, void*);
  static void cb_feedback_l(psiDialX*, void*);
public:
  psiDialX *delay_timel;
private:
  void cb_delay_timel_i(psiDialX*, void*);
  static void cb_delay_timel(psiDialX*, void*);
public:
  Fl_Button *delay_sync;
private:
  void cb_delay_sync_i(Fl_Button*, void*);
  static void cb_delay_sync(Fl_Button*, void*);
public:
  psi::Fader *filter_mix;
private:
  void cb_filter_mix_i(psi::Fader*, void*);
  static void cb_filter_mix(psi::Fader*, void*);
public:
  psi::Fader *osc_mix;
private:
  void cb_osc_mix_i(psi::Fader*, void*);
  static void cb_osc_mix(psi::Fader*, void*);
public:
  psi::Fader *eq_low;
private:
  void cb_eq_low_i(psi::Fader*, void*);
  static void cb_eq_low(psi::Fader*, void*);
public:
  psi::Fader *eq_mid;
private:
  void cb_eq_mid_i(psi::Fader*, void*);
  static void cb_eq_mid(psi::Fader*, void*);
public:
  psi::Fader *eq_high;
private:
  void cb_eq_high_i(psi::Fader*, void*);
  static void cb_eq_high(psi::Fader*, void*);
public:
  psiDialX *filter1_type;
private:
  void cb_filter1_type_i(psiDialX*, void*);
  static void cb_filter1_type(psiDialX*, void*);
public:
  psiDialX *filter1_cutoff;
private:
  void cb_filter1_cutoff_i(psiDialX*, void*);
  static void cb_filter1_cutoff(psiDialX*, void*);
public:
  psiDialX *filter1_resonance;
private:
  void cb_filter1_resonance_i(psiDialX*, void*);
  static void cb_filter1_resonance(psiDialX*, void*);
public:
  psiDialX *filter1_keytrack;
private:
  void cb_filter1_keytrack_i(psiDialX*, void*);
  static void cb_filter1_keytrack(psiDialX*, void*);
public:
  psiDialX *osc1_sub;
private:
  void cb_osc1_sub_i(psiDialX*, void*);
  static void cb_osc1_sub(psiDialX*, void*);
public:
  psiDialX *osc1_vol;
private:
  void cb_osc1_vol_i(psiDialX*, void*);
  static void cb_osc1_vol(psiDialX*, void*);
public:
  psiDialX *osc1_tune;
private:
  void cb_osc1_tune_i(psiDialX*, void*);
  static void cb_osc1_tune(psiDialX*, void*);
public:
  psiDialX *osc1_fine;
private:
  void cb_osc1_fine_i(psiDialX*, void*);
  static void cb_osc1_fine(psiDialX*, void*);
public:
  psiDialX_Mod *osc1_pitch_mod;
private:
  void cb_osc1_pitch_mod_i(psiDialX_Mod*, void*);
  static void cb_osc1_pitch_mod(psiDialX_Mod*, void*);
public:
  psiDialX *osc1_unison;
private:
  void cb_osc1_unison_i(psiDialX*, void*);
  static void cb_osc1_unison(psiDialX*, void*);
public:
  psiDialX *osc1_det;
private:
  void cb_osc1_det_i(psiDialX*, void*);
  static void cb_osc1_det(psiDialX*, void*);
public:
  psiDialX *osc1_mix;
private:
  void cb_osc1_mix_i(psiDialX*, void*);
  static void cb_osc1_mix(psiDialX*, void*);
public:
  psiDialX *osc2_wave;
private:
  void cb_osc2_wave_i(psiDialX*, void*);
  static void cb_osc2_wave(psiDialX*, void*);
public:
  psiDialX *osc2_unison;
private:
  void cb_osc2_unison_i(psiDialX*, void*);
  static void cb_osc2_unison(psiDialX*, void*);
public:
  psiDialX *osc2_det;
private:
  void cb_osc2_det_i(psiDialX*, void*);
  static void cb_osc2_det(psiDialX*, void*);
public:
  psiDialX *osc2_mix;
private:
  void cb_osc2_mix_i(psiDialX*, void*);
  static void cb_osc2_mix(psiDialX*, void*);
public:
  psiDialX *osc2_distortion;
private:
  void cb_osc2_distortion_i(psiDialX*, void*);
  static void cb_osc2_distortion(psiDialX*, void*);
public:
  psiDialX *osc2_tune;
private:
  void cb_osc2_tune_i(psiDialX*, void*);
  static void cb_osc2_tune(psiDialX*, void*);
public:
  psiDialX *osc2_fine;
private:
  void cb_osc2_fine_i(psiDialX*, void*);
  static void cb_osc2_fine(psiDialX*, void*);
public:
  psiDialX_Mod *osc2_pitch_mod;
private:
  void cb_osc2_pitch_mod_i(psiDialX_Mod*, void*);
  static void cb_osc2_pitch_mod(psiDialX_Mod*, void*);
public:
  psiDialX *filter2_type;
private:
  void cb_filter2_type_i(psiDialX*, void*);
  static void cb_filter2_type(psiDialX*, void*);
public:
  psiDialX *filter2_cutoff;
private:
  void cb_filter2_cutoff_i(psiDialX*, void*);
  static void cb_filter2_cutoff(psiDialX*, void*);
public:
  psiDialX *filter2_resonance;
private:
  void cb_filter2_resonance_i(psiDialX*, void*);
  static void cb_filter2_resonance(psiDialX*, void*);
public:
  psiDialX *filter2_keytrack;
private:
  void cb_filter2_keytrack_i(psiDialX*, void*);
  static void cb_filter2_keytrack(psiDialX*, void*);
public:
  psiDialX *osc2_noise;
private:
  void cb_osc2_noise_i(psiDialX*, void*);
  static void cb_osc2_noise(psiDialX*, void*);
public:
  psiDialX *osc2_vol;
private:
  void cb_osc2_vol_i(psiDialX*, void*);
  static void cb_osc2_vol(psiDialX*, void*);
public:
  psiDialX *filter3_type;
private:
  void cb_filter3_type_i(psiDialX*, void*);
  static void cb_filter3_type(psiDialX*, void*);
public:
  psiDialX *filter3_cutoff;
private:
  void cb_filter3_cutoff_i(psiDialX*, void*);
  static void cb_filter3_cutoff(psiDialX*, void*);
public:
  Fl_Button *filt3_button;
private:
  void cb_filt3_button_i(Fl_Button*, void*);
  static void cb_filt3_button(Fl_Button*, void*);
public:
  psiDialX *filter3_resonance;
private:
  void cb_filter3_resonance_i(psiDialX*, void*);
  static void cb_filter3_resonance(psiDialX*, void*);
public:
  psiDialX *filter4_resonance;
private:
  void cb_filter4_resonance_i(psiDialX*, void*);
  static void cb_filter4_resonance(psiDialX*, void*);
public:
  Fl_Button *filt4_button;
private:
  void cb_filt4_button_i(Fl_Button*, void*);
  static void cb_filt4_button(Fl_Button*, void*);
public:
  psiDialX *filter4_type;
private:
  void cb_filter4_type_i(psiDialX*, void*);
  static void cb_filter4_type(psiDialX*, void*);
public:
  psiDialX *filter4_cutoff;
private:
  void cb_filter4_cutoff_i(psiDialX*, void*);
  static void cb_filter4_cutoff(psiDialX*, void*);
public:
  Fl_Button *midi_learn;
private:
  void cb_midi_learn_i(Fl_Button*, void*);
  static void cb_midi_learn(Fl_Button*, void*);
public:
  Fl_Button *osc1_unison_type;
private:
  void cb_osc1_unison_type_i(Fl_Button*, void*);
  static void cb_osc1_unison_type(Fl_Button*, void*);
public:
  Fl_Button *midi_channel;
private:
  void cb_midi_channel_i(Fl_Button*, void*);
  static void cb_midi_channel(Fl_Button*, void*);
public:
  Fl_Button *key_split;
private:
  void cb_key_split_i(Fl_Button*, void*);
  static void cb_key_split(Fl_Button*, void*);
public:
  Fl_Button *btn_midi_mappings;
private:
  void cb_btn_midi_mappings_i(Fl_Button*, void*);
  static void cb_btn_midi_mappings(Fl_Button*, void*);
public:
  psiDialX_Mod *osc2_phase;
private:
  void cb_osc2_phase_i(psiDialX_Mod*, void*);
  static void cb_osc2_phase(psiDialX_Mod*, void*);
public:
  psiDialX_Mod *osc1_phase;
private:
  void cb_osc1_phase_i(psiDialX_Mod*, void*);
  static void cb_osc1_phase(psiDialX_Mod*, void*);
public:
  Fl_Output *led_display;
  Fl_Box *led_display2;
  Fl_Button *panic;
private:
  void cb_panic_i(Fl_Button*, void*);
  static void cb_panic(Fl_Button*, void*);
public:
  Fl_Value_Input *tempo;
private:
  void cb_tempo_i(Fl_Value_Input*, void*);
  static void cb_tempo(Fl_Value_Input*, void*);
public:
  psiDialX *delay_timer;
private:
  void cb_delay_timer_i(psiDialX*, void*);
  static void cb_delay_timer(psiDialX*, void*);
public:
  psi::Fader *volume;
private:
  void cb_volume_i(psi::Fader*, void*);
  static void cb_volume(psi::Fader*, void*);
public:
  Fl_Button *delay_split;
private:
  void cb_delay_split_i(Fl_Button*, void*);
  static void cb_delay_split(Fl_Button*, void*);
public:
  psiLFO *lfo1;
private:
  void cb_lfo1_i(psiLFO*, void*);
  static void cb_lfo1(psiLFO*, void*);
public:
  psiLFO *lfo2;
private:
  void cb_lfo2_i(psiLFO*, void*);
  static void cb_lfo2(psiLFO*, void*);
public:
  psiLFO *lfo3;
private:
  void cb_lfo3_i(psiLFO*, void*);
  static void cb_lfo3(psiLFO*, void*);
public:
  psiENV *env1;
private:
  void cb_env1_i(psiENV*, void*);
  static void cb_env1(psiENV*, void*);
public:
  psiENV *env2;
private:
  void cb_env2_i(psiENV*, void*);
  static void cb_env2(psiENV*, void*);
public:
  psiENV *env3;
private:
  void cb_env3_i(psiENV*, void*);
  static void cb_env3(psiENV*, void*);
public:
  psiENV *env4;
private:
  void cb_env4_i(psiENV*, void*);
  static void cb_env4(psiENV*, void*);
public:
  psiDialX_Mod *filt1_cutoff_mod;
private:
  void cb_filt1_cutoff_mod_i(psiDialX_Mod*, void*);
  static void cb_filt1_cutoff_mod(psiDialX_Mod*, void*);
public:
  psiDialX_Mod *filt2_cutoff_mod;
private:
  void cb_filt2_cutoff_mod_i(psiDialX_Mod*, void*);
  static void cb_filt2_cutoff_mod(psiDialX_Mod*, void*);
public:
  psiDialX_Mod *filt3_cutoff_mod;
private:
  void cb_filt3_cutoff_mod_i(psiDialX_Mod*, void*);
  static void cb_filt3_cutoff_mod(psiDialX_Mod*, void*);
public:
  psiDialX_Mod *filt4_cutoff_mod;
private:
  void cb_filt4_cutoff_mod_i(psiDialX_Mod*, void*);
  static void cb_filt4_cutoff_mod(psiDialX_Mod*, void*);
public:
  psiDialX_Mod *pan;
private:
  void cb_pan_i(psiDialX_Mod*, void*);
  static void cb_pan(psiDialX_Mod*, void*);
public:
  Fl_Button *delay_lock;
private:
  void cb_delay_lock_i(Fl_Button*, void*);
  static void cb_delay_lock(Fl_Button*, void*);
public:
  psiDialX *feedback_r;
private:
  void cb_feedback_r_i(psiDialX*, void*);
  static void cb_feedback_r(psiDialX*, void*);
public:
  Fl_Button *delay_fblock;
private:
  void cb_delay_fblock_i(Fl_Button*, void*);
  static void cb_delay_fblock(Fl_Button*, void*);
public:
  psiMidiMapping *midi_mapping_window;
private:
  void cb_midi_mapping_window_i(psiMidiMapping*, void*);
  static void cb_midi_mapping_window(psiMidiMapping*, void*);
public:
  Fl_Menu_Item modulation_menu[16] = {
        { "OFF" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { "LFO1" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "LFO2" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "LFO3" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "ENV1" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "ENV2" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "ENV3" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "ENV4" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "IENV3" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { "IENV4" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "XLFO1" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "XLFO2" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "XLFO3" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { "XENV3" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { "XENV4" ,0, 0, 0, 0, 0,  FL_HELVETICA , 10,  0 },
        { 0 }
    }; 
  const char *wave_menu[9] = {
      { "Sine" },
      { "Tri" },
      { "Saw" },
      { "Rev Saw" },
      { "Sqr" },
      { "Stair" },
      { "Pulse" },
      { 0 } }; 
  const char *filter_types[10] = {
      { "Bypass" },
      { "LP12" },
      { "HP12" },
      { "BP12" },
      { "LP24" },
      { "HP24" },
      { "BP24" },
      { "HP6" },
      { "BP6" },
      { 0 } }; 
  Fl_Menu_Item env_menu[3] = {
      { "Poly" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "Loop" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { 0 } }; 
  Fl_Menu_Item detune_menu[3] = {
      { "Roland" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "Exponential" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { 0 } }; 
  Fl_Menu_Item on_off_menu[3] = {
      { "Off" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "On" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { 0 } }; 
  Fl_Menu_Item finput_menu[5] = {
        { "Bypass" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { "OSC1+2",0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { "OSC1",0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { "OSC2",0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { 0 }}; 
  Fl_Menu_Item finput2_menu[6] = {
        { "Bypass" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { "OSC1+2",0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { "OSC1",0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { "OSC2",0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { "FILT1",0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
        { 0 }}; 
  Fl_Menu_Item channel_menu[18] = {
      { "All" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "1" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "2" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "3" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "4" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "5" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "6" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "7" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "8" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "9" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "10" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "11" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "12" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "13" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "14" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "15" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { "16" ,0, 0, 0, 0, 0, FL_HELVETICA , 10,  0 },
      { 0 } }; 
  int midi_learn_on = 0; 
  float osc1_mod1_amt = 0.0; 
  float osc1_mod2_amt = 0.0; 
  float osc1_mod3_amt = 0.0; 
  float osc2_mod1_amt = 0.0; 
  float osc2_mod2_amt = 0.0; 
  float osc2_mod3_amt = 0.0; 
  float filt1_mod1_amt = 0.0; 
  float filt1_mod2_amt = 0.0; 
  float filt1_mod3_amt = 0.0; 
  float filt2_mod1_amt = 0.0; 
  float filt2_mod2_amt = 0.0; 
  float filt2_mod3_amt = 0.0; 
  float filt3_mod1_amt = 0.0; 
  float filt3_mod2_amt = 0.0; 
  float filt3_mod3_amt = 0.0; 
  float filt4_mod1_amt = 0.0; 
  float filt4_mod2_amt = 0.0; 
  float filt4_mod3_amt = 0.0; 
  float midi_map[V_MIDI_MAPS]; 
  void cb_menu(const Fl_Menu_Item* items, const Fl_Menu_Item* m, Fl_Button* button, int port);
  LV2UI_Write_Function write_function; 
  LV2UI_Controller controller; 
  void writePort(const int port, const double value, const int sync = 0);
  void idle();
  int getWidth();
  int getHeight();
};
#include <FL/Fl_Slider.H>
#include <FL/Fl_Button.H>
#endif
