// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "super_welle_widget.h"

void SuperWelleUI::cb_osc1_wave_i(psiDialX* o, void*) {
  writePort( V_OS1_SHP,o->value());
}
void SuperWelleUI::cb_osc1_wave(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_wave_i(o,v);
}

void SuperWelleUI::cb_osc1_distortion_i(psiDialX* o, void*) {
  writePort( V_OS1_DST,o->value());
}
void SuperWelleUI::cb_osc1_distortion(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_distortion_i(o,v);
}

void SuperWelleUI::cb_polyphony_i(psiDialX* o, void*) {
  writePort( V_PLY, o->value());
}
void SuperWelleUI::cb_polyphony(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_polyphony_i(o,v);
}

void SuperWelleUI::cb_glide_i(psiDialX* o, void*) {
  writePort( V_GLIDE, o->value());
}
void SuperWelleUI::cb_glide(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_glide_i(o,v);
}

void SuperWelleUI::cb_feedback_l_i(psiDialX* o, void*) {
  const bool lock = (delay_fblock->color() == FL_GRAY);
const bool sync = ( strcmp(delay_sync->label(), "On") == 0);
if (lock)
{
   feedback_r->value(o->value());
   writePort( V_DLY_FBR, feedback_r->value(),sync); 
}
writePort( V_DLY_FBL, o->value(), sync);
}
void SuperWelleUI::cb_feedback_l(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_feedback_l_i(o,v);
}

void SuperWelleUI::cb_delay_timel_i(psiDialX* o, void*) {
  bool sync = (strcmp(delay_sync->label(), "Off")!=0);
bool lock = (delay_lock->color() == FL_GRAY);


if (lock)
{
   delay_timer->value(o->value());
   writePort( V_DLY_TMR, delay_timer->value(), sync); 
}
writePort( V_DLY_TML, o->value(), sync);
}
void SuperWelleUI::cb_delay_timel(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_delay_timel_i(o,v);
}

void SuperWelleUI::cb_delay_sync_i(Fl_Button*, void*) {
  if (strcmp(delay_sync->label(), "Off") == 0)
{
    writePort( V_DLY_BPM, 1.0, 0);
    delay_sync->label("On");
} else {
   writePort( V_DLY_BPM, 0.0, 0);
   delay_sync->label("Off"); 
};
}
void SuperWelleUI::cb_delay_sync(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_delay_sync_i(o,v);
}

void SuperWelleUI::cb_filter_mix_i(psi::Fader* o, void*) {
  writePort( V_F_MIX,o->value());
}
void SuperWelleUI::cb_filter_mix(psi::Fader* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter_mix_i(o,v);
}

void SuperWelleUI::cb_osc_mix_i(psi::Fader* o, void*) {
  writePort( V_OSC_MIX,o->value());
}
void SuperWelleUI::cb_osc_mix(psi::Fader* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc_mix_i(o,v);
}

void SuperWelleUI::cb_eq_low_i(psi::Fader* o, void*) {
  writePort( V_LOW, o->value());
}
void SuperWelleUI::cb_eq_low(psi::Fader* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_eq_low_i(o,v);
}

void SuperWelleUI::cb_eq_mid_i(psi::Fader* o, void*) {
  writePort( V_MID, o->value());
}
void SuperWelleUI::cb_eq_mid(psi::Fader* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_eq_mid_i(o,v);
}

void SuperWelleUI::cb_eq_high_i(psi::Fader* o, void*) {
  writePort( V_HGH, o->value());
}
void SuperWelleUI::cb_eq_high(psi::Fader* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_eq_high_i(o,v);
}

void SuperWelleUI::cb_filter1_type_i(psiDialX* o, void*) {
  writePort( V_FL1_TYP,o->value());
}
void SuperWelleUI::cb_filter1_type(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter1_type_i(o,v);
}

void SuperWelleUI::cb_filter1_cutoff_i(psiDialX* o, void*) {
  writePort( V_FL1_CUT, o->value() );
}
void SuperWelleUI::cb_filter1_cutoff(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter1_cutoff_i(o,v);
}

void SuperWelleUI::cb_filter1_resonance_i(psiDialX* o, void*) {
  writePort( V_FL1_RES,o->value());
}
void SuperWelleUI::cb_filter1_resonance(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter1_resonance_i(o,v);
}

void SuperWelleUI::cb_filter1_keytrack_i(psiDialX* o, void*) {
  writePort( V_FL1_TRK,o->value() );
}
void SuperWelleUI::cb_filter1_keytrack(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter1_keytrack_i(o,v);
}

void SuperWelleUI::cb_osc1_sub_i(psiDialX* o, void*) {
  writePort( V_OS1_SUB,o->value() );
}
void SuperWelleUI::cb_osc1_sub(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_sub_i(o,v);
}

void SuperWelleUI::cb_osc1_vol_i(psiDialX* o, void*) {
  writePort( V_OS1_VOL,o->value() );
}
void SuperWelleUI::cb_osc1_vol(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_vol_i(o,v);
}

void SuperWelleUI::cb_osc1_tune_i(psiDialX* o, void*) {
  writePort( V_OS1_TUNE,o->value() + osc1_fine->value() / 100.0);
}
void SuperWelleUI::cb_osc1_tune(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_tune_i(o,v);
}

void SuperWelleUI::cb_osc1_fine_i(psiDialX* o, void*) {
  writePort( V_OS1_TUNE,o->value() / 100.0 + osc1_tune->value());
}
void SuperWelleUI::cb_osc1_fine(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_fine_i(o,v);
}

void SuperWelleUI::cb_osc1_pitch_mod_i(psiDialX_Mod* o, void*) {
  writePort(V_OS1_PIT_M1 + o->changed_index(), o->changed_value(), 0);
}
void SuperWelleUI::cb_osc1_pitch_mod(psiDialX_Mod* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_pitch_mod_i(o,v);
}

void SuperWelleUI::cb_osc1_unison_i(psiDialX* o, void*) {
  writePort( V_OS1_UNI,o->value());
}
void SuperWelleUI::cb_osc1_unison(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_unison_i(o,v);
}

void SuperWelleUI::cb_osc1_det_i(psiDialX* o, void*) {
  writePort( V_OS1_UNI_DET,o->value());
}
void SuperWelleUI::cb_osc1_det(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_det_i(o,v);
}

void SuperWelleUI::cb_osc1_mix_i(psiDialX* o, void*) {
  writePort( V_OS1_UNI_MIX,o->value());
}
void SuperWelleUI::cb_osc1_mix(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_mix_i(o,v);
}

void SuperWelleUI::cb_osc2_wave_i(psiDialX* o, void*) {
  writePort( V_OS2_SHP,o->value());
}
void SuperWelleUI::cb_osc2_wave(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_wave_i(o,v);
}

void SuperWelleUI::cb_osc2_unison_i(psiDialX* o, void*) {
  writePort( V_OS2_UNI,o->value());
}
void SuperWelleUI::cb_osc2_unison(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_unison_i(o,v);
}

void SuperWelleUI::cb_osc2_det_i(psiDialX* o, void*) {
  writePort( V_OS2_UNI_DET,o->value());
}
void SuperWelleUI::cb_osc2_det(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_det_i(o,v);
}

void SuperWelleUI::cb_osc2_mix_i(psiDialX* o, void*) {
  writePort( V_OS2_UNI_MIX,o->value());
}
void SuperWelleUI::cb_osc2_mix(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_mix_i(o,v);
}

void SuperWelleUI::cb_osc2_distortion_i(psiDialX* o, void*) {
  writePort( V_OS2_DST,o->value() );
}
void SuperWelleUI::cb_osc2_distortion(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_distortion_i(o,v);
}

void SuperWelleUI::cb_osc2_tune_i(psiDialX* o, void*) {
  writePort( V_OS2_TUNE,o->value() + osc2_fine->value()  / 100.0);
}
void SuperWelleUI::cb_osc2_tune(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_tune_i(o,v);
}

void SuperWelleUI::cb_osc2_fine_i(psiDialX* o, void*) {
  writePort( V_OS2_TUNE,o->value()  / 100.0 + osc2_tune->value());
}
void SuperWelleUI::cb_osc2_fine(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_fine_i(o,v);
}

void SuperWelleUI::cb_osc2_pitch_mod_i(psiDialX_Mod* o, void*) {
  writePort(V_OS2_PIT_M1 + o->changed_index(), o->changed_value(), 0);
}
void SuperWelleUI::cb_osc2_pitch_mod(psiDialX_Mod* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_pitch_mod_i(o,v);
}

void SuperWelleUI::cb_filter2_type_i(psiDialX* o, void*) {
  writePort( V_FL2_TYP,o->value());
}
void SuperWelleUI::cb_filter2_type(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter2_type_i(o,v);
}

void SuperWelleUI::cb_filter2_cutoff_i(psiDialX* o, void*) {
  writePort( V_FL2_CUT, o->value() );
}
void SuperWelleUI::cb_filter2_cutoff(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter2_cutoff_i(o,v);
}

void SuperWelleUI::cb_filter2_resonance_i(psiDialX* o, void*) {
  writePort( V_FL2_RES,o->value());
}
void SuperWelleUI::cb_filter2_resonance(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter2_resonance_i(o,v);
}

void SuperWelleUI::cb_filter2_keytrack_i(psiDialX* o, void*) {
  writePort( V_FL2_TRK,o->value() );
}
void SuperWelleUI::cb_filter2_keytrack(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter2_keytrack_i(o,v);
}

void SuperWelleUI::cb_osc2_noise_i(psiDialX* o, void*) {
  writePort( V_OS2_NSE,o->value() );
}
void SuperWelleUI::cb_osc2_noise(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_noise_i(o,v);
}

void SuperWelleUI::cb_osc2_vol_i(psiDialX* o, void*) {
  writePort( V_OS2_VOL,o->value() );
}
void SuperWelleUI::cb_osc2_vol(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_vol_i(o,v);
}

void SuperWelleUI::cb_filter3_type_i(psiDialX* o, void*) {
  writePort( V_FL3_TYP,o->value());
}
void SuperWelleUI::cb_filter3_type(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter3_type_i(o,v);
}

void SuperWelleUI::cb_filter3_cutoff_i(psiDialX* o, void*) {
  writePort( V_FL3_CUT, o->value() );
}
void SuperWelleUI::cb_filter3_cutoff(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter3_cutoff_i(o,v);
}

void SuperWelleUI::cb_filt3_button_i(Fl_Button* o, void*) {
  const Fl_Menu_Item *m = finput_menu->popup(205,445, 0, 0, 0);
    if ( !m ) {
        return;
    } cb_menu(finput_menu, m, o, V_FL3_IN);
    
    
        
    return;
}
void SuperWelleUI::cb_filt3_button(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filt3_button_i(o,v);
}

void SuperWelleUI::cb_filter3_resonance_i(psiDialX* o, void*) {
  writePort( V_FL3_RES,o->value());
}
void SuperWelleUI::cb_filter3_resonance(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter3_resonance_i(o,v);
}

void SuperWelleUI::cb_filter4_resonance_i(psiDialX* o, void*) {
  writePort( V_FL4_RES,o->value());
}
void SuperWelleUI::cb_filter4_resonance(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter4_resonance_i(o,v);
}

void SuperWelleUI::cb_filt4_button_i(Fl_Button* o, void*) {
  const Fl_Menu_Item *m = finput2_menu->popup(205,540, 0, 0, 0);
    if ( !m ) {
        return;
    } cb_menu(finput2_menu, m, o, V_FL4_IN);
    
    
        
    return;
}
void SuperWelleUI::cb_filt4_button(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filt4_button_i(o,v);
}

void SuperWelleUI::cb_filter4_type_i(psiDialX* o, void*) {
  writePort( V_FL4_TYP,o->value());
}
void SuperWelleUI::cb_filter4_type(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter4_type_i(o,v);
}

void SuperWelleUI::cb_filter4_cutoff_i(psiDialX* o, void*) {
  writePort( V_FL4_CUT, o->value() );
}
void SuperWelleUI::cb_filter4_cutoff(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filter4_cutoff_i(o,v);
}

void SuperWelleUI::cb_midi_learn_i(Fl_Button* o, void*) {
  if (midi_learn_on == 1) {
                o->color(49);
                midi_learn_on = 0;
                writePort( V_MID_ON,0.0);
            } else {
                o->color(FL_RED);
                writePort( V_MID_ON,1.0);
                midi_learn_on = 1;
            };
}
void SuperWelleUI::cb_midi_learn(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_midi_learn_i(o,v);
}

void SuperWelleUI::cb_osc1_unison_type_i(Fl_Button* o, void*) {
  const Fl_Menu_Item *m = detune_menu->popup(290,20, 0, 0, 0);
              if ( !m ) { return; }
              else cb_menu(detune_menu, m, o , V_UNI_TYP);
}
void SuperWelleUI::cb_osc1_unison_type(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_unison_type_i(o,v);
}

void SuperWelleUI::cb_midi_channel_i(Fl_Button* o, void*) {
  const Fl_Menu_Item *m = channel_menu->popup(545,20, 0, 0, 0);
if ( !m ) { return; }
else {
    cb_menu(channel_menu, m, o , V_MID_CHN);
};
}
void SuperWelleUI::cb_midi_channel(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_midi_channel_i(o,v);
}

void SuperWelleUI::cb_key_split_i(Fl_Button* o, void*) {
  const Fl_Menu_Item *m = on_off_menu->popup(420,20, 0, 0, 0);
if ( !m ) { return; }
else cb_menu(on_off_menu, m, o , V_MID_KBD_SPT);
}
void SuperWelleUI::cb_key_split(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_key_split_i(o,v);
}

void SuperWelleUI::cb_btn_midi_mappings_i(Fl_Button* o, void*) {
  midi_mapping_window->populate(midi_map, V_MIDI_MAPS);
midi_mapping_window->ui = this;
midi_mapping_window->position(o->parent()->x()+o->parent()->w()/2-midi_mapping_window->w()/2,o->parent()->y()+o->parent()->h()/2-midi_mapping_window->h()/2);
midi_mapping_window->activate();midi_mapping_window->show();
}
void SuperWelleUI::cb_btn_midi_mappings(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_btn_midi_mappings_i(o,v);
}

void SuperWelleUI::cb_osc2_phase_i(psiDialX_Mod* o, void*) {
  writePort(V_OS2_WID_MOD + o->changed_index(), o->changed_value(), 0);
}
void SuperWelleUI::cb_osc2_phase(psiDialX_Mod* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc2_phase_i(o,v);
}

void SuperWelleUI::cb_osc1_phase_i(psiDialX_Mod* o, void*) {
  writePort(V_OS1_WID_MOD + o->changed_index(), o->changed_value(), 0);
}
void SuperWelleUI::cb_osc1_phase(psiDialX_Mod* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_osc1_phase_i(o,v);
}

void SuperWelleUI::cb_panic_i(Fl_Button*, void*) {
  writePort( V_NOT_OFF,1.0);
}
void SuperWelleUI::cb_panic(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_panic_i(o,v);
}

void SuperWelleUI::cb_tempo_i(Fl_Value_Input* o, void*) {
  writePort( V_TMP, (float) o->value());
}
void SuperWelleUI::cb_tempo(Fl_Value_Input* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_tempo_i(o,v);
}

void SuperWelleUI::cb_delay_timer_i(psiDialX* o, void*) {
  bool sync = (strcmp(delay_sync->label(), "Off")!=0);
bool lock = (delay_lock->color() == FL_GRAY);

if (lock)
{
   delay_timel->value(o->value());
   writePort( V_DLY_TML, delay_timer->value(), sync); 
}
writePort( V_DLY_TMR, o->value(), sync);
}
void SuperWelleUI::cb_delay_timer(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_delay_timer_i(o,v);
}

void SuperWelleUI::cb_volume_i(psi::Fader* o, void*) {
  writePort( V_VOLUME, o->value());
}
void SuperWelleUI::cb_volume(psi::Fader* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_volume_i(o,v);
}

void SuperWelleUI::cb_delay_split_i(Fl_Button*, void*) {
  if (strcmp(delay_split->label(), "Off") == 0)
{
    writePort( V_DLY_SPT, 1.0, 0);
    delay_split->label("On");
} else {
   writePort( V_DLY_SPT, 0.0, 0);
   delay_split->label("Off"); 
};
}
void SuperWelleUI::cb_delay_split(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_delay_split_i(o,v);
}

void SuperWelleUI::cb_lfo1_i(psiLFO* o, void*) {
  if (o->port_index()==0) 
        writePort(V_LF1_FRQ, o->value(), lfo1->synced() );
    else 
        writePort(V_LF1_FRQ + o->port_index(), o->value(), 0);
}
void SuperWelleUI::cb_lfo1(psiLFO* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_lfo1_i(o,v);
}

void SuperWelleUI::cb_lfo2_i(psiLFO* o, void*) {
  if (o->port_index()==0) 
        writePort(V_LF2_FRQ, o->value(), lfo2->synced() );
    else 
        writePort(V_LF2_FRQ + o->port_index(), o->value(), 0);
}
void SuperWelleUI::cb_lfo2(psiLFO* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_lfo2_i(o,v);
}

void SuperWelleUI::cb_lfo3_i(psiLFO* o, void*) {
  if (o->port_index()==0) 
        writePort(V_LF3_FRQ, o->value(), lfo3->synced() );
    else 
        writePort(V_LF3_FRQ + o->port_index(), o->value(), 0);
}
void SuperWelleUI::cb_lfo3(psiLFO* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_lfo3_i(o,v);
}

void SuperWelleUI::cb_env1_i(psiENV* o, void*) {
  writePort(V_EN1_ATT + o->port_index(), o->value(), 0);
}
void SuperWelleUI::cb_env1(psiENV* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_env1_i(o,v);
}

void SuperWelleUI::cb_env2_i(psiENV* o, void*) {
  writePort(V_EN2_ATT + o->port_index(), o->value(), 0);
}
void SuperWelleUI::cb_env2(psiENV* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_env2_i(o,v);
}

void SuperWelleUI::cb_env3_i(psiENV* o, void*) {
  writePort(V_EN3_ATT + o->port_index(), o->value(), 0);
}
void SuperWelleUI::cb_env3(psiENV* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_env3_i(o,v);
}

void SuperWelleUI::cb_env4_i(psiENV* o, void*) {
  writePort(V_EN4_ATT + o->port_index(), o->value(), 0);
}
void SuperWelleUI::cb_env4(psiENV* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_env4_i(o,v);
}

void SuperWelleUI::cb_filt1_cutoff_mod_i(psiDialX_Mod* o, void*) {
  writePort(V_FL1_M1 + o->changed_index(), o->changed_value(), 0);
}
void SuperWelleUI::cb_filt1_cutoff_mod(psiDialX_Mod* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filt1_cutoff_mod_i(o,v);
}

void SuperWelleUI::cb_filt2_cutoff_mod_i(psiDialX_Mod* o, void*) {
  writePort(V_FL2_M1 + o->changed_index(), o->changed_value(), 0);
}
void SuperWelleUI::cb_filt2_cutoff_mod(psiDialX_Mod* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filt2_cutoff_mod_i(o,v);
}

void SuperWelleUI::cb_filt3_cutoff_mod_i(psiDialX_Mod* o, void*) {
  writePort(V_FL3_M1 + o->changed_index(), o->changed_value(), 0);
}
void SuperWelleUI::cb_filt3_cutoff_mod(psiDialX_Mod* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filt3_cutoff_mod_i(o,v);
}

void SuperWelleUI::cb_filt4_cutoff_mod_i(psiDialX_Mod* o, void*) {
  writePort(V_FL4_M1 + o->changed_index(), o->changed_value(), 0);
}
void SuperWelleUI::cb_filt4_cutoff_mod(psiDialX_Mod* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_filt4_cutoff_mod_i(o,v);
}

void SuperWelleUI::cb_pan_i(psiDialX_Mod* o, void*) {
  writePort(V_PAN_M1 + o->changed_index(), o->changed_value(), 0);
}
void SuperWelleUI::cb_pan(psiDialX_Mod* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_pan_i(o,v);
}

void SuperWelleUI::cb_delay_lock_i(Fl_Button* o, void*) {
  if (o->color() == FL_GRAY) o->color(FL_BLACK);
else 
{
    o->color(FL_GRAY);
    delay_timer->value(delay_timel->value());
    delay_timer->do_callback();
}
o->redraw();
}
void SuperWelleUI::cb_delay_lock(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_delay_lock_i(o,v);
}

void SuperWelleUI::cb_feedback_r_i(psiDialX* o, void*) {
  const bool lock = (delay_fblock->color() == FL_GRAY);
const bool sync = ( strcmp(delay_sync->label(), "On") == 0);
if (lock)
{
   feedback_l->value(o->value());
   writePort( V_DLY_FBL, feedback_l->value(),sync); 
}
writePort( V_DLY_FBR, o->value(), sync);
}
void SuperWelleUI::cb_feedback_r(psiDialX* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_feedback_r_i(o,v);
}

void SuperWelleUI::cb_delay_fblock_i(Fl_Button* o, void*) {
  if (o->color() == FL_GRAY) o->color(FL_BLACK);
else 
{
    o->color(FL_GRAY);
    feedback_r->value(feedback_l->value());
    feedback_r->do_callback();
}
o->redraw();
}
void SuperWelleUI::cb_delay_fblock(Fl_Button* o, void* v) {
  ((SuperWelleUI*)(o->parent()->user_data()))->cb_delay_fblock_i(o,v);
}

void SuperWelleUI::cb_midi_mapping_window_i(psiMidiMapping* o, void*) {
  float port = V_MID_L01;          
for (int idx = 0; idx < V_MIDI_MAPS; idx++)
{
    
    midi_map[idx] = (float)((o->data[idx].channel << 16) | (o->data[idx].cc << 8) | (o->data[idx].port)) ;
    
    writePort(port++, (float)midi_map[idx]);
    
}
o->hide();
window->redraw();
}
void SuperWelleUI::cb_midi_mapping_window(psiMidiMapping* o, void* v) {
  ((SuperWelleUI*)(o->user_data()))->cb_midi_mapping_window_i(o,v);
}

void SuperWelleUI::update_button(int button) {
}

SuperWelleUI::SuperWelleUI() {
  { window = new Fl_Double_Window(785, 625);
    window->box(FL_FLAT_BOX);
    window->color(FL_BACKGROUND_COLOR);
    window->selection_color(FL_BACKGROUND_COLOR);
    window->labeltype(FL_NO_LABEL);
    window->labelfont(0);
    window->labelsize(14);
    window->labelcolor(FL_FOREGROUND_COLOR);
    window->user_data((void*)(this));
    window->align(Fl_Align(FL_ALIGN_CENTER));
    window->when(FL_WHEN_RELEASE);
    { psiLabelBox* o = mainbox = new psiLabelBox(0, 0, 785, 625, "psi Super Welle");
      mainbox->box(FL_BORDER_BOX);
      mainbox->color(FL_BACKGROUND_COLOR);
      mainbox->selection_color(FL_BACKGROUND_COLOR);
      mainbox->labeltype(FL_NORMAL_LABEL);
      mainbox->labelfont(0);
      mainbox->labelsize(14);
      mainbox->labelcolor(FL_GRAY0);
      mainbox->align(Fl_Align(FL_ALIGN_CENTER));
      mainbox->when(FL_WHEN_RELEASE);
      o->label_align( 125, 15, LBL_LEFT, 5, 10, BOX_NORMAL);
    } // psiLabelBox* mainbox
    { psiLabelBox* o = new psiLabelBox(5, 125, 580, 90, "OSC2");
      o->box(FL_BORDER_BOX);
      o->color(FL_DARK1);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_DARK_GREEN);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 38, 15, LBL_LEFT, 5, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(5, 410, 775, 210, "GLOBAL");
      o->box(FL_BORDER_BOX);
      o->color(FL_LIGHT1);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_LIGHT3);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 50, 15, LBL_LEFT, 5, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(5, 30, 580, 90, "OSC1");
      o->box(FL_BORDER_BOX);
      o->color(FL_DARK1);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)221);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 38, 15, LBL_LEFT, 5, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(560, 415, 215, 200, "MIX");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)48);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_LIGHT2);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 42, 15, LBL_CENTER, 85, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(5, 220, 290, 90, "Filter 1");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)48);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)221);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 40, 15, LBL_CENTER, 127, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(300, 220, 285, 90, "Filter 2");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)48);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_DARK_GREEN);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 40, 15, LBL_CENTER, 122, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(260, 430, 295, 90, "DELAY");
      o->box(FL_BORDER_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_LIGHT2);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 50, 15, LBL_LEFT, 5, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(10, 430, 245, 90, "Filter 3");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)48);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_LIGHT2);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 40, 15, LBL_CENTER, 102, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(10, 525, 245, 90, "Filter 4");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)48);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_LIGHT2);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 40, 15, LBL_CENTER, 102, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(250, 47, 185, 58, " ");
      o->box(FL_BORDER_BOX);
      o->color(FL_LIGHT1);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)51);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 0, 0, LBL_LEFT,5, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(250, 142, 185, 58, " ");
      o->box(FL_BORDER_BOX);
      o->color(FL_LIGHT1);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)51);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 0, 0, LBL_LEFT,5, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(350, 237, 135, 58, " ");
      o->box(FL_BORDER_BOX);
      o->color(FL_LIGHT1);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)51);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 0, 0, LBL_LEFT,5, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(65, 447, 135, 58, " ");
      o->box(FL_BORDER_BOX);
      o->color(FL_LIGHT1);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)51);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 0, 0, LBL_LEFT,5, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiLabelBox* o = new psiLabelBox(65, 542, 135, 58, " ");
      o->box(FL_BORDER_BOX);
      o->color(FL_LIGHT1);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)51);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 0, 0, LBL_LEFT,5, 10, BOX_ROUND);
    } // psiLabelBox* o
    { psiDialX* o = osc1_wave = new psiDialX(20, 42, 40, 58, "Shape");
      osc1_wave->tooltip("Oscillator 1 wave shape");
      osc1_wave->box(FL_ROUNDED_BOX);
      osc1_wave->color(FL_DARK_RED);
      osc1_wave->selection_color(FL_INACTIVE_COLOR);
      osc1_wave->labeltype(FL_NORMAL_LABEL);
      osc1_wave->labelfont(0);
      osc1_wave->labelsize(10);
      osc1_wave->labelcolor((Fl_Color)221);
      osc1_wave->maximum(6);
      osc1_wave->step(1);
      osc1_wave->callback((Fl_Callback*)cb_osc1_wave);
      osc1_wave->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc1_wave->when(FL_WHEN_CHANGED);
      const char *a[7];
                a[0] = "Sine";
                a[1] = "Triangle";
                a[2] = "Saw";
                a[3] = "Rev Saw";
                a[4] = "Square";
                a[5] = "Stair";
                a[6] = "Pulse";
                o->display_values_set(a, 7);
                o->draw_val_box = 1;
    } // psiDialX* osc1_wave
    { osc1_distortion = new psiDialX(205, 50, 40, 40, "Dist");
      osc1_distortion->tooltip("Oscillator 1 wave-shaping distortion ampunt");
      osc1_distortion->box(FL_ROUNDED_BOX);
      osc1_distortion->color(FL_DARK_RED);
      osc1_distortion->selection_color(FL_INACTIVE_COLOR);
      osc1_distortion->labeltype(FL_NORMAL_LABEL);
      osc1_distortion->labelfont(0);
      osc1_distortion->labelsize(10);
      osc1_distortion->labelcolor((Fl_Color)221);
      osc1_distortion->maximum(100);
      osc1_distortion->step(0.01);
      osc1_distortion->callback((Fl_Callback*)cb_osc1_distortion);
      osc1_distortion->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc1_distortion->when(FL_WHEN_CHANGED);
    } // psiDialX* osc1_distortion
    { polyphony = new psiDialX(275, 525, 40, 40, "Polyphony");
      polyphony->tooltip("Maximum number of voices. Select 1 for legato.");
      polyphony->box(FL_ROUNDED_BOX);
      polyphony->color(FL_DARK_RED);
      polyphony->selection_color(FL_INACTIVE_COLOR);
      polyphony->labeltype(FL_NORMAL_LABEL);
      polyphony->labelfont(0);
      polyphony->labelsize(10);
      polyphony->labelcolor((Fl_Color)221);
      polyphony->minimum(1);
      polyphony->maximum(16);
      polyphony->step(1);
      polyphony->value(16);
      polyphony->callback((Fl_Callback*)cb_polyphony);
      polyphony->align(Fl_Align(FL_ALIGN_BOTTOM));
      polyphony->when(FL_WHEN_CHANGED);
    } // psiDialX* polyphony
    { glide = new psiDialX(330, 525, 40, 40, "Glide");
      glide->tooltip("Glide time between the current note and the last note");
      glide->box(FL_ROUNDED_BOX);
      glide->color(FL_DARK_RED);
      glide->selection_color(FL_INACTIVE_COLOR);
      glide->labeltype(FL_NORMAL_LABEL);
      glide->labelfont(0);
      glide->labelsize(10);
      glide->labelcolor((Fl_Color)221);
      glide->step(0.01);
      glide->callback((Fl_Callback*)cb_glide);
      glide->align(Fl_Align(FL_ALIGN_BOTTOM));
      glide->when(FL_WHEN_CHANGED);
    } // psiDialX* glide
    { psiLabelBox* o = new psiLabelBox(60, 237, 135, 58, " ");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)51);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)51);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 0, 0, LBL_LEFT,5, 10, BOX_ROUND);
    } // psiLabelBox* o
    { feedback_l = new psiDialX(275, 452, 40, 43, "Amount L");
      feedback_l->box(FL_ROUNDED_BOX);
      feedback_l->color(FL_DARK_RED);
      feedback_l->selection_color(FL_INACTIVE_COLOR);
      feedback_l->labeltype(FL_NORMAL_LABEL);
      feedback_l->labelfont(0);
      feedback_l->labelsize(10);
      feedback_l->labelcolor((Fl_Color)221);
      feedback_l->maximum(100);
      feedback_l->step(0.01);
      feedback_l->callback((Fl_Callback*)cb_feedback_l);
      feedback_l->align(Fl_Align(FL_ALIGN_BOTTOM));
      feedback_l->when(FL_WHEN_CHANGED);
    } // psiDialX* feedback_l
    { delay_timel = new psiDialX(420, 453, 40, 42, "Delay L");
      delay_timel->box(FL_ROUNDED_BOX);
      delay_timel->color(FL_DARK_RED);
      delay_timel->selection_color(FL_INACTIVE_COLOR);
      delay_timel->labeltype(FL_NORMAL_LABEL);
      delay_timel->labelfont(0);
      delay_timel->labelsize(10);
      delay_timel->labelcolor((Fl_Color)221);
      delay_timel->step(0.01);
      delay_timel->callback((Fl_Callback*)cb_delay_timel);
      delay_timel->align(Fl_Align(FL_ALIGN_BOTTOM));
      delay_timel->when(FL_WHEN_CHANGED);
    } // psiDialX* delay_timel
    { Fl_Box* o = new Fl_Box(380, 437, 30, 13, "Sync");
      o->labelsize(9);
      o->labelcolor((Fl_Color)221);
    } // Fl_Box* o
    { Fl_Button* o = delay_sync = new Fl_Button(411, 435, 40, 15, "Off");
      delay_sync->tooltip("Sync delay to BPM");
      delay_sync->down_box(FL_BORDER_BOX);
      delay_sync->labelsize(10);
      delay_sync->callback((Fl_Callback*)cb_delay_sync);
      o->visible_focus(0);
    } // Fl_Button* delay_sync
    { psi::Fader* o = filter_mix = new psi::Fader(605, 450, 20, 140, "F4");
      filter_mix->tooltip("Adjusts the balance between filter 13 and filter 4 outputs.");
      filter_mix->type(4);
      filter_mix->box(FL_NO_BOX);
      filter_mix->color(FL_BACKGROUND_COLOR);
      filter_mix->selection_color(FL_BACKGROUND_COLOR);
      filter_mix->labeltype(FL_NORMAL_LABEL);
      filter_mix->labelfont(0);
      filter_mix->labelsize(10);
      filter_mix->labelcolor((Fl_Color)221);
      filter_mix->minimum(1);
      filter_mix->maximum(0);
      filter_mix->step(0.001);
      filter_mix->callback((Fl_Callback*)cb_filter_mix);
      filter_mix->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter_mix->when(FL_WHEN_CHANGED);
      o->visible_focus(0);
    } // psi::Fader* filter_mix
    { psi::Fader* o = osc_mix = new psi::Fader(575, 450, 20, 140, "OSC2");
      osc_mix->tooltip("Adjust the balance between OSC1 and OSC2 when they are used together as input\
 for global filters 3 or 4.");
      osc_mix->type(4);
      osc_mix->box(FL_NO_BOX);
      osc_mix->color(FL_BACKGROUND_COLOR);
      osc_mix->selection_color(FL_BACKGROUND_COLOR);
      osc_mix->labeltype(FL_NORMAL_LABEL);
      osc_mix->labelfont(0);
      osc_mix->labelsize(10);
      osc_mix->labelcolor((Fl_Color)221);
      osc_mix->minimum(1);
      osc_mix->maximum(0);
      osc_mix->step(0.001);
      osc_mix->callback((Fl_Callback*)cb_osc_mix);
      osc_mix->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc_mix->when(FL_WHEN_CHANGED);
      o->visible_focus(0);
    } // psi::Fader* osc_mix
    { psi::Fader* o = eq_low = new psi::Fader(635, 450, 20, 140, "Low");
      eq_low->type(4);
      eq_low->box(FL_NO_BOX);
      eq_low->color(FL_BACKGROUND_COLOR);
      eq_low->selection_color(FL_BACKGROUND_COLOR);
      eq_low->labeltype(FL_NORMAL_LABEL);
      eq_low->labelfont(0);
      eq_low->labelsize(10);
      eq_low->labelcolor((Fl_Color)221);
      eq_low->minimum(6);
      eq_low->maximum(-70);
      eq_low->value(-20);
      eq_low->callback((Fl_Callback*)cb_eq_low);
      eq_low->align(Fl_Align(FL_ALIGN_BOTTOM));
      eq_low->when(FL_WHEN_CHANGED);
      o->visible_focus(0);
    } // psi::Fader* eq_low
    { psi::Fader* o = eq_mid = new psi::Fader(665, 450, 20, 140, "Mid");
      eq_mid->type(4);
      eq_mid->box(FL_NO_BOX);
      eq_mid->color(FL_BACKGROUND_COLOR);
      eq_mid->selection_color(FL_BACKGROUND_COLOR);
      eq_mid->labeltype(FL_NORMAL_LABEL);
      eq_mid->labelfont(0);
      eq_mid->labelsize(10);
      eq_mid->labelcolor((Fl_Color)221);
      eq_mid->minimum(6);
      eq_mid->maximum(-70);
      eq_mid->value(-20);
      eq_mid->callback((Fl_Callback*)cb_eq_mid);
      eq_mid->align(Fl_Align(FL_ALIGN_BOTTOM));
      eq_mid->when(FL_WHEN_CHANGED);
      o->visible_focus(0);
    } // psi::Fader* eq_mid
    { psi::Fader* o = eq_high = new psi::Fader(695, 450, 20, 140, "High");
      eq_high->type(4);
      eq_high->box(FL_NO_BOX);
      eq_high->color(FL_BACKGROUND_COLOR);
      eq_high->selection_color(FL_BACKGROUND_COLOR);
      eq_high->labeltype(FL_NORMAL_LABEL);
      eq_high->labelfont(0);
      eq_high->labelsize(10);
      eq_high->labelcolor((Fl_Color)221);
      eq_high->minimum(6);
      eq_high->maximum(-70);
      eq_high->value(-20);
      eq_high->callback((Fl_Callback*)cb_eq_high);
      eq_high->align(Fl_Align(FL_ALIGN_BOTTOM));
      eq_high->when(FL_WHEN_CHANGED);
      o->visible_focus(0);
    } // psi::Fader* eq_high
    { Fl_Box* o = new Fl_Box(570, 429, 30, 18, "OSC1");
      o->labelsize(10);
      o->labelcolor((Fl_Color)221);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(600, 429, 30, 18, "F3");
      o->labelsize(10);
      o->labelcolor((Fl_Color)221);
    } // Fl_Box* o
    { psiDialX* o = filter1_type = new psiDialX(15, 230, 40, 60, "Filter");
      filter1_type->tooltip("Filter 1 type (OSC1):\n    LP12 / BP12 / HP12 - State variable filters\n    L\
P24 - Moog 4 pole filter\n    HP6 / BP6 - Moog 1 pole");
      filter1_type->box(FL_ROUNDED_BOX);
      filter1_type->color(FL_DARK_RED);
      filter1_type->selection_color(FL_INACTIVE_COLOR);
      filter1_type->labeltype(FL_NORMAL_LABEL);
      filter1_type->labelfont(0);
      filter1_type->labelsize(10);
      filter1_type->labelcolor((Fl_Color)221);
      filter1_type->maximum(8);
      filter1_type->step(1);
      filter1_type->callback((Fl_Callback*)cb_filter1_type);
      filter1_type->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter1_type->when(FL_WHEN_CHANGED);
      o->display_values_set(filter_types, 9);o->draw_val_box = 1;
    } // psiDialX* filter1_type
    { filter1_cutoff = new psiDialX(65, 240, 40, 40, "Cutoff");
      filter1_cutoff->tooltip("Filter 1 cutoff");
      filter1_cutoff->box(FL_ROUNDED_BOX);
      filter1_cutoff->color(FL_DARK_RED);
      filter1_cutoff->selection_color(FL_INACTIVE_COLOR);
      filter1_cutoff->labeltype(FL_NORMAL_LABEL);
      filter1_cutoff->labelfont(0);
      filter1_cutoff->labelsize(10);
      filter1_cutoff->labelcolor((Fl_Color)221);
      filter1_cutoff->maximum(20000);
      filter1_cutoff->step(0.01);
      filter1_cutoff->value(1500);
      filter1_cutoff->callback((Fl_Callback*)cb_filter1_cutoff);
      filter1_cutoff->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter1_cutoff->when(FL_WHEN_CHANGED);
    } // psiDialX* filter1_cutoff
    { filter1_resonance = new psiDialX(200, 240, 40, 40, "Res");
      filter1_resonance->tooltip("Filter 1 resonance");
      filter1_resonance->box(FL_ROUNDED_BOX);
      filter1_resonance->color(FL_DARK_RED);
      filter1_resonance->selection_color(FL_INACTIVE_COLOR);
      filter1_resonance->labeltype(FL_NORMAL_LABEL);
      filter1_resonance->labelfont(0);
      filter1_resonance->labelsize(10);
      filter1_resonance->labelcolor((Fl_Color)221);
      filter1_resonance->maximum(100);
      filter1_resonance->step(0.1);
      filter1_resonance->callback((Fl_Callback*)cb_filter1_resonance);
      filter1_resonance->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter1_resonance->when(FL_WHEN_CHANGED);
    } // psiDialX* filter1_resonance
    { filter1_keytrack = new psiDialX(245, 240, 40, 40, "Key Trk");
      filter1_keytrack->tooltip("Filter 1 key tracking amount");
      filter1_keytrack->box(FL_ROUNDED_BOX);
      filter1_keytrack->color(FL_DARK_RED);
      filter1_keytrack->selection_color(FL_INACTIVE_COLOR);
      filter1_keytrack->labeltype(FL_NORMAL_LABEL);
      filter1_keytrack->labelfont(0);
      filter1_keytrack->labelsize(10);
      filter1_keytrack->labelcolor((Fl_Color)221);
      filter1_keytrack->maximum(100);
      filter1_keytrack->step(0.01);
      filter1_keytrack->callback((Fl_Callback*)cb_filter1_keytrack);
      filter1_keytrack->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter1_keytrack->when(FL_WHEN_CHANGED);
    } // psiDialX* filter1_keytrack
    { osc1_sub = new psiDialX(160, 50, 40, 40, "Sub");
      osc1_sub->tooltip("Sub oscillator volume");
      osc1_sub->box(FL_ROUNDED_BOX);
      osc1_sub->color(FL_DARK_RED);
      osc1_sub->selection_color(FL_INACTIVE_COLOR);
      osc1_sub->labeltype(FL_NORMAL_LABEL);
      osc1_sub->labelfont(0);
      osc1_sub->labelsize(10);
      osc1_sub->labelcolor((Fl_Color)221);
      osc1_sub->maximum(100);
      osc1_sub->step(0.01);
      osc1_sub->callback((Fl_Callback*)cb_osc1_sub);
      osc1_sub->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc1_sub->when(FL_WHEN_CHANGED);
    } // psiDialX* osc1_sub
    { osc1_vol = new psiDialX(115, 50, 40, 40, "Volume");
      osc1_vol->tooltip("Oscillator 1 volume");
      osc1_vol->box(FL_ROUNDED_BOX);
      osc1_vol->color(FL_DARK_RED);
      osc1_vol->selection_color(FL_INACTIVE_COLOR);
      osc1_vol->labeltype(FL_NORMAL_LABEL);
      osc1_vol->labelfont(0);
      osc1_vol->labelsize(10);
      osc1_vol->labelcolor((Fl_Color)221);
      osc1_vol->maximum(100);
      osc1_vol->step(0.01);
      osc1_vol->callback((Fl_Callback*)cb_osc1_vol);
      osc1_vol->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc1_vol->when(FL_WHEN_CHANGED);
    } // psiDialX* osc1_vol
    { osc1_tune = new psiDialX(255, 50, 40, 40, "Tune");
      osc1_tune->box(FL_ROUNDED_BOX);
      osc1_tune->color(FL_DARK_RED);
      osc1_tune->selection_color(FL_INACTIVE_COLOR);
      osc1_tune->labeltype(FL_NORMAL_LABEL);
      osc1_tune->labelfont(0);
      osc1_tune->labelsize(10);
      osc1_tune->labelcolor((Fl_Color)221);
      osc1_tune->minimum(-24);
      osc1_tune->maximum(24);
      osc1_tune->step(1);
      osc1_tune->callback((Fl_Callback*)cb_osc1_tune);
      osc1_tune->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc1_tune->when(FL_WHEN_CHANGED);
    } // psiDialX* osc1_tune
    { osc1_fine = new psiDialX(300, 50, 40, 40, "Fine");
      osc1_fine->box(FL_ROUNDED_BOX);
      osc1_fine->color(FL_DARK_RED);
      osc1_fine->selection_color(FL_INACTIVE_COLOR);
      osc1_fine->labeltype(FL_NORMAL_LABEL);
      osc1_fine->labelfont(0);
      osc1_fine->labelsize(10);
      osc1_fine->labelcolor((Fl_Color)221);
      osc1_fine->minimum(-100);
      osc1_fine->maximum(100);
      osc1_fine->step(1);
      osc1_fine->callback((Fl_Callback*)cb_osc1_fine);
      osc1_fine->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc1_fine->when(FL_WHEN_CHANGED);
    } // psiDialX* osc1_fine
    { psiDialX_Mod* o = osc1_pitch_mod = new psiDialX_Mod(345, 50, 85, 55, " Mod ");
      osc1_pitch_mod->box(FL_NO_BOX);
      osc1_pitch_mod->color(FL_BACKGROUND_COLOR);
      osc1_pitch_mod->selection_color(FL_BACKGROUND_COLOR);
      osc1_pitch_mod->labeltype(FL_NORMAL_LABEL);
      osc1_pitch_mod->labelfont(0);
      osc1_pitch_mod->labelsize(14);
      osc1_pitch_mod->labelcolor(FL_FOREGROUND_COLOR);
      osc1_pitch_mod->callback((Fl_Callback*)cb_osc1_pitch_mod);
      osc1_pitch_mod->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      osc1_pitch_mod->when(FL_WHEN_RELEASE);
      o->mod_menu(modulation_menu, 15);
      osc1_pitch_mod->end();
    } // psiDialX_Mod* osc1_pitch_mod
    { osc1_unison = new psiDialX(440, 51, 40, 40, "Unison");
      osc1_unison->tooltip("Number of unison oscillators");
      osc1_unison->box(FL_ROUNDED_BOX);
      osc1_unison->color(FL_DARK_RED);
      osc1_unison->selection_color(FL_INACTIVE_COLOR);
      osc1_unison->labeltype(FL_NORMAL_LABEL);
      osc1_unison->labelfont(0);
      osc1_unison->labelsize(10);
      osc1_unison->labelcolor((Fl_Color)221);
      osc1_unison->minimum(1);
      osc1_unison->maximum(16);
      osc1_unison->step(1);
      osc1_unison->value(63);
      osc1_unison->callback((Fl_Callback*)cb_osc1_unison);
      osc1_unison->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc1_unison->when(FL_WHEN_CHANGED);
    } // psiDialX* osc1_unison
    { osc1_det = new psiDialX(485, 51, 40, 40, "Detune");
      osc1_det->tooltip("Unison detune amount");
      osc1_det->box(FL_ROUNDED_BOX);
      osc1_det->color(FL_DARK_RED);
      osc1_det->selection_color(FL_INACTIVE_COLOR);
      osc1_det->labeltype(FL_NORMAL_LABEL);
      osc1_det->labelfont(0);
      osc1_det->labelsize(10);
      osc1_det->labelcolor((Fl_Color)221);
      osc1_det->minimum(1);
      osc1_det->maximum(127);
      osc1_det->step(1);
      osc1_det->value(63);
      osc1_det->callback((Fl_Callback*)cb_osc1_det);
      osc1_det->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc1_det->when(FL_WHEN_CHANGED);
    } // psiDialX* osc1_det
    { osc1_mix = new psiDialX(530, 51, 40, 40, "Mix");
      osc1_mix->tooltip("Side oscillator volume relative to the center oscillator");
      osc1_mix->box(FL_ROUNDED_BOX);
      osc1_mix->color(FL_DARK_RED);
      osc1_mix->selection_color(FL_INACTIVE_COLOR);
      osc1_mix->labeltype(FL_NORMAL_LABEL);
      osc1_mix->labelfont(0);
      osc1_mix->labelsize(10);
      osc1_mix->labelcolor((Fl_Color)221);
      osc1_mix->minimum(1);
      osc1_mix->maximum(127);
      osc1_mix->step(1);
      osc1_mix->value(63);
      osc1_mix->callback((Fl_Callback*)cb_osc1_mix);
      osc1_mix->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc1_mix->when(FL_WHEN_CHANGED);
    } // psiDialX* osc1_mix
    { psiDialX* o = osc2_wave = new psiDialX(20, 135, 40, 60, "Shape");
      osc2_wave->tooltip("Oscillator 2 wave shape");
      osc2_wave->box(FL_ROUNDED_BOX);
      osc2_wave->color(FL_DARK_RED);
      osc2_wave->selection_color(FL_INACTIVE_COLOR);
      osc2_wave->labeltype(FL_NORMAL_LABEL);
      osc2_wave->labelfont(0);
      osc2_wave->labelsize(10);
      osc2_wave->labelcolor((Fl_Color)221);
      osc2_wave->maximum(6);
      osc2_wave->step(1);
      osc2_wave->callback((Fl_Callback*)cb_osc2_wave);
      osc2_wave->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc2_wave->when(FL_WHEN_CHANGED);
      const char *a[7];
                a[0] = "Sine";
                a[1] = "Triangle";
                a[2] = "Saw";
                a[3] = "Rev Saw";
                a[4] = "Square";
                a[5] = "Stair";
                a[6] = "Pulse";
                o->display_values_set(a, 7);o->draw_val_box = 1;
    } // psiDialX* osc2_wave
    { osc2_unison = new psiDialX(440, 145, 40, 40, "Unison");
      osc2_unison->tooltip("Number of unison oscillators");
      osc2_unison->box(FL_ROUNDED_BOX);
      osc2_unison->color(FL_DARK_RED);
      osc2_unison->selection_color(FL_INACTIVE_COLOR);
      osc2_unison->labeltype(FL_NORMAL_LABEL);
      osc2_unison->labelfont(0);
      osc2_unison->labelsize(10);
      osc2_unison->labelcolor((Fl_Color)221);
      osc2_unison->minimum(1);
      osc2_unison->maximum(16);
      osc2_unison->step(1);
      osc2_unison->value(63);
      osc2_unison->callback((Fl_Callback*)cb_osc2_unison);
      osc2_unison->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc2_unison->when(FL_WHEN_CHANGED);
    } // psiDialX* osc2_unison
    { osc2_det = new psiDialX(485, 145, 40, 40, "Detune");
      osc2_det->tooltip("Unison detune amount");
      osc2_det->box(FL_ROUNDED_BOX);
      osc2_det->color(FL_DARK_RED);
      osc2_det->selection_color(FL_INACTIVE_COLOR);
      osc2_det->labeltype(FL_NORMAL_LABEL);
      osc2_det->labelfont(0);
      osc2_det->labelsize(10);
      osc2_det->labelcolor((Fl_Color)221);
      osc2_det->minimum(1);
      osc2_det->maximum(127);
      osc2_det->step(1);
      osc2_det->value(63);
      osc2_det->callback((Fl_Callback*)cb_osc2_det);
      osc2_det->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc2_det->when(FL_WHEN_CHANGED);
    } // psiDialX* osc2_det
    { osc2_mix = new psiDialX(530, 145, 40, 40, "Mix");
      osc2_mix->tooltip("Side oscillator volume relative to the center oscillator");
      osc2_mix->box(FL_ROUNDED_BOX);
      osc2_mix->color(FL_DARK_RED);
      osc2_mix->selection_color(FL_INACTIVE_COLOR);
      osc2_mix->labeltype(FL_NORMAL_LABEL);
      osc2_mix->labelfont(0);
      osc2_mix->labelsize(10);
      osc2_mix->labelcolor((Fl_Color)221);
      osc2_mix->minimum(1);
      osc2_mix->maximum(127);
      osc2_mix->step(1);
      osc2_mix->value(63);
      osc2_mix->callback((Fl_Callback*)cb_osc2_mix);
      osc2_mix->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc2_mix->when(FL_WHEN_CHANGED);
    } // psiDialX* osc2_mix
    { osc2_distortion = new psiDialX(205, 145, 40, 40, "Dist");
      osc2_distortion->tooltip("Oscillator 2 wave-shaping distortion ampunt");
      osc2_distortion->box(FL_ROUNDED_BOX);
      osc2_distortion->color(FL_DARK_RED);
      osc2_distortion->selection_color(FL_INACTIVE_COLOR);
      osc2_distortion->labeltype(FL_NORMAL_LABEL);
      osc2_distortion->labelfont(0);
      osc2_distortion->labelsize(10);
      osc2_distortion->labelcolor((Fl_Color)221);
      osc2_distortion->maximum(100);
      osc2_distortion->step(0.01);
      osc2_distortion->callback((Fl_Callback*)cb_osc2_distortion);
      osc2_distortion->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc2_distortion->when(FL_WHEN_CHANGED);
    } // psiDialX* osc2_distortion
    { osc2_tune = new psiDialX(255, 145, 40, 40, "Tune");
      osc2_tune->box(FL_ROUNDED_BOX);
      osc2_tune->color(FL_DARK_RED);
      osc2_tune->selection_color(FL_INACTIVE_COLOR);
      osc2_tune->labeltype(FL_NORMAL_LABEL);
      osc2_tune->labelfont(0);
      osc2_tune->labelsize(10);
      osc2_tune->labelcolor((Fl_Color)221);
      osc2_tune->minimum(-24);
      osc2_tune->maximum(24);
      osc2_tune->step(1);
      osc2_tune->callback((Fl_Callback*)cb_osc2_tune);
      osc2_tune->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc2_tune->when(FL_WHEN_CHANGED);
    } // psiDialX* osc2_tune
    { osc2_fine = new psiDialX(300, 145, 40, 40, "Fine");
      osc2_fine->box(FL_ROUNDED_BOX);
      osc2_fine->color(FL_DARK_RED);
      osc2_fine->selection_color(FL_INACTIVE_COLOR);
      osc2_fine->labeltype(FL_NORMAL_LABEL);
      osc2_fine->labelfont(0);
      osc2_fine->labelsize(10);
      osc2_fine->labelcolor((Fl_Color)221);
      osc2_fine->minimum(-100);
      osc2_fine->maximum(100);
      osc2_fine->step(1);
      osc2_fine->callback((Fl_Callback*)cb_osc2_fine);
      osc2_fine->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc2_fine->when(FL_WHEN_CHANGED);
    } // psiDialX* osc2_fine
    { psiDialX_Mod* o = osc2_pitch_mod = new psiDialX_Mod(345, 145, 85, 55, " Mod ");
      osc2_pitch_mod->box(FL_NO_BOX);
      osc2_pitch_mod->color(FL_BACKGROUND_COLOR);
      osc2_pitch_mod->selection_color(FL_BACKGROUND_COLOR);
      osc2_pitch_mod->labeltype(FL_NORMAL_LABEL);
      osc2_pitch_mod->labelfont(0);
      osc2_pitch_mod->labelsize(14);
      osc2_pitch_mod->labelcolor(FL_FOREGROUND_COLOR);
      osc2_pitch_mod->callback((Fl_Callback*)cb_osc2_pitch_mod);
      osc2_pitch_mod->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      osc2_pitch_mod->when(FL_WHEN_RELEASE);
      o->mod_menu(modulation_menu, 15);
      osc2_pitch_mod->end();
    } // psiDialX_Mod* osc2_pitch_mod
    { psiDialX* o = filter2_type = new psiDialX(305, 229, 40, 60, "Filter");
      filter2_type->tooltip("Filter 2 type");
      filter2_type->box(FL_ROUNDED_BOX);
      filter2_type->color(FL_DARK_RED);
      filter2_type->selection_color(FL_INACTIVE_COLOR);
      filter2_type->labeltype(FL_NORMAL_LABEL);
      filter2_type->labelfont(0);
      filter2_type->labelsize(10);
      filter2_type->labelcolor((Fl_Color)221);
      filter2_type->maximum(8);
      filter2_type->step(1);
      filter2_type->callback((Fl_Callback*)cb_filter2_type);
      filter2_type->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter2_type->when(FL_WHEN_CHANGED);
      o->display_values_set(filter_types, 9);o->draw_val_box = 1;
    } // psiDialX* filter2_type
    { filter2_cutoff = new psiDialX(355, 240, 40, 40, "Cutoff");
      filter2_cutoff->tooltip("Filter 2 cutoff");
      filter2_cutoff->box(FL_ROUNDED_BOX);
      filter2_cutoff->color(FL_DARK_RED);
      filter2_cutoff->selection_color(FL_INACTIVE_COLOR);
      filter2_cutoff->labeltype(FL_NORMAL_LABEL);
      filter2_cutoff->labelfont(0);
      filter2_cutoff->labelsize(10);
      filter2_cutoff->labelcolor((Fl_Color)221);
      filter2_cutoff->maximum(20000);
      filter2_cutoff->callback((Fl_Callback*)cb_filter2_cutoff);
      filter2_cutoff->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter2_cutoff->when(FL_WHEN_CHANGED);
    } // psiDialX* filter2_cutoff
    { filter2_resonance = new psiDialX(490, 240, 40, 40, "Res");
      filter2_resonance->tooltip("Filter 2 resonance");
      filter2_resonance->box(FL_ROUNDED_BOX);
      filter2_resonance->color(FL_DARK_RED);
      filter2_resonance->selection_color(FL_INACTIVE_COLOR);
      filter2_resonance->labeltype(FL_NORMAL_LABEL);
      filter2_resonance->labelfont(0);
      filter2_resonance->labelsize(10);
      filter2_resonance->labelcolor((Fl_Color)221);
      filter2_resonance->maximum(100);
      filter2_resonance->step(0.1);
      filter2_resonance->callback((Fl_Callback*)cb_filter2_resonance);
      filter2_resonance->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter2_resonance->when(FL_WHEN_CHANGED);
    } // psiDialX* filter2_resonance
    { filter2_keytrack = new psiDialX(535, 240, 40, 40, "Key Trk");
      filter2_keytrack->tooltip("Filter 2 key tracking amount");
      filter2_keytrack->box(FL_ROUNDED_BOX);
      filter2_keytrack->color(FL_DARK_RED);
      filter2_keytrack->selection_color(FL_INACTIVE_COLOR);
      filter2_keytrack->labeltype(FL_NORMAL_LABEL);
      filter2_keytrack->labelfont(0);
      filter2_keytrack->labelsize(10);
      filter2_keytrack->labelcolor((Fl_Color)221);
      filter2_keytrack->maximum(100);
      filter2_keytrack->step(0.01);
      filter2_keytrack->callback((Fl_Callback*)cb_filter2_keytrack);
      filter2_keytrack->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter2_keytrack->when(FL_WHEN_CHANGED);
    } // psiDialX* filter2_keytrack
    { osc2_noise = new psiDialX(160, 145, 40, 40, "Noise");
      osc2_noise->tooltip("Noise volume");
      osc2_noise->box(FL_ROUNDED_BOX);
      osc2_noise->color(FL_DARK_RED);
      osc2_noise->selection_color(FL_INACTIVE_COLOR);
      osc2_noise->labeltype(FL_NORMAL_LABEL);
      osc2_noise->labelfont(0);
      osc2_noise->labelsize(10);
      osc2_noise->labelcolor((Fl_Color)221);
      osc2_noise->maximum(100);
      osc2_noise->step(0.01);
      osc2_noise->callback((Fl_Callback*)cb_osc2_noise);
      osc2_noise->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc2_noise->when(FL_WHEN_CHANGED);
    } // psiDialX* osc2_noise
    { osc2_vol = new psiDialX(115, 145, 40, 40, "Volume");
      osc2_vol->tooltip("Oscillator 2 volume");
      osc2_vol->box(FL_ROUNDED_BOX);
      osc2_vol->color(FL_DARK_RED);
      osc2_vol->selection_color(FL_INACTIVE_COLOR);
      osc2_vol->labeltype(FL_NORMAL_LABEL);
      osc2_vol->labelfont(0);
      osc2_vol->labelsize(10);
      osc2_vol->labelcolor((Fl_Color)221);
      osc2_vol->maximum(100);
      osc2_vol->step(0.01);
      osc2_vol->callback((Fl_Callback*)cb_osc2_vol);
      osc2_vol->align(Fl_Align(FL_ALIGN_BOTTOM));
      osc2_vol->when(FL_WHEN_CHANGED);
    } // psiDialX* osc2_vol
    { psiDialX* o = filter3_type = new psiDialX(20, 440, 40, 60, "Filter");
      filter3_type->tooltip("Filter 3 type");
      filter3_type->box(FL_ROUNDED_BOX);
      filter3_type->color(FL_DARK_RED);
      filter3_type->selection_color(FL_INACTIVE_COLOR);
      filter3_type->labeltype(FL_NORMAL_LABEL);
      filter3_type->labelfont(0);
      filter3_type->labelsize(10);
      filter3_type->labelcolor((Fl_Color)221);
      filter3_type->maximum(8);
      filter3_type->step(1);
      filter3_type->callback((Fl_Callback*)cb_filter3_type);
      filter3_type->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter3_type->when(FL_WHEN_CHANGED);
      o->display_values_set(filter_types, 9);o->draw_val_box = 1;
    } // psiDialX* filter3_type
    { filter3_cutoff = new psiDialX(70, 450, 40, 40, "Cutoff");
      filter3_cutoff->tooltip("Filter 3 cutoff");
      filter3_cutoff->box(FL_ROUNDED_BOX);
      filter3_cutoff->color(FL_DARK_RED);
      filter3_cutoff->selection_color(FL_INACTIVE_COLOR);
      filter3_cutoff->labeltype(FL_NORMAL_LABEL);
      filter3_cutoff->labelfont(0);
      filter3_cutoff->labelsize(10);
      filter3_cutoff->labelcolor((Fl_Color)221);
      filter3_cutoff->maximum(20000);
      filter3_cutoff->step(1);
      filter3_cutoff->callback((Fl_Callback*)cb_filter3_cutoff);
      filter3_cutoff->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter3_cutoff->when(FL_WHEN_CHANGED);
    } // psiDialX* filter3_cutoff
    { Fl_Button* o = filt3_button = new Fl_Button(205, 435, 45, 15, "OSC1+2");
      filt3_button->tooltip("Select Filter 3 input");
      filt3_button->down_box(FL_BORDER_BOX);
      filt3_button->labelsize(9);
      filt3_button->callback((Fl_Callback*)cb_filt3_button);
      o->visible_focus(0);
    } // Fl_Button* filt3_button
    { filter3_resonance = new psiDialX(205, 450, 40, 40, "Res");
      filter3_resonance->tooltip("Filter 3 resonance");
      filter3_resonance->box(FL_ROUNDED_BOX);
      filter3_resonance->color(FL_DARK_RED);
      filter3_resonance->selection_color(FL_INACTIVE_COLOR);
      filter3_resonance->labeltype(FL_NORMAL_LABEL);
      filter3_resonance->labelfont(0);
      filter3_resonance->labelsize(10);
      filter3_resonance->labelcolor((Fl_Color)221);
      filter3_resonance->maximum(100);
      filter3_resonance->step(0.1);
      filter3_resonance->callback((Fl_Callback*)cb_filter3_resonance);
      filter3_resonance->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter3_resonance->when(FL_WHEN_CHANGED);
    } // psiDialX* filter3_resonance
    { filter4_resonance = new psiDialX(205, 545, 40, 40, "Res");
      filter4_resonance->tooltip("Filter 4 resonance");
      filter4_resonance->box(FL_ROUNDED_BOX);
      filter4_resonance->color(FL_DARK_RED);
      filter4_resonance->selection_color(FL_INACTIVE_COLOR);
      filter4_resonance->labeltype(FL_NORMAL_LABEL);
      filter4_resonance->labelfont(0);
      filter4_resonance->labelsize(10);
      filter4_resonance->labelcolor((Fl_Color)221);
      filter4_resonance->maximum(100);
      filter4_resonance->step(0.1);
      filter4_resonance->callback((Fl_Callback*)cb_filter4_resonance);
      filter4_resonance->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter4_resonance->when(FL_WHEN_CHANGED);
    } // psiDialX* filter4_resonance
    { Fl_Button* o = filt4_button = new Fl_Button(205, 530, 45, 15, "FILT1");
      filt4_button->tooltip("Select Filter 4 input");
      filt4_button->down_box(FL_BORDER_BOX);
      filt4_button->labelsize(9);
      filt4_button->callback((Fl_Callback*)cb_filt4_button);
      o->visible_focus(0);
    } // Fl_Button* filt4_button
    { psiDialX* o = filter4_type = new psiDialX(20, 535, 40, 60, "Filter");
      filter4_type->tooltip("Filter 4 type");
      filter4_type->box(FL_ROUNDED_BOX);
      filter4_type->color(FL_DARK_RED);
      filter4_type->selection_color(FL_INACTIVE_COLOR);
      filter4_type->labeltype(FL_NORMAL_LABEL);
      filter4_type->labelfont(0);
      filter4_type->labelsize(10);
      filter4_type->labelcolor((Fl_Color)221);
      filter4_type->maximum(8);
      filter4_type->step(1);
      filter4_type->callback((Fl_Callback*)cb_filter4_type);
      filter4_type->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter4_type->when(FL_WHEN_CHANGED);
      o->display_values_set(filter_types, 9);o->draw_val_box = 1;
    } // psiDialX* filter4_type
    { filter4_cutoff = new psiDialX(70, 545, 40, 40, "Cutoff");
      filter4_cutoff->tooltip("Filter 4 cutoff");
      filter4_cutoff->box(FL_ROUNDED_BOX);
      filter4_cutoff->color(FL_DARK_RED);
      filter4_cutoff->selection_color(FL_INACTIVE_COLOR);
      filter4_cutoff->labeltype(FL_NORMAL_LABEL);
      filter4_cutoff->labelfont(0);
      filter4_cutoff->labelsize(10);
      filter4_cutoff->labelcolor((Fl_Color)221);
      filter4_cutoff->maximum(20000);
      filter4_cutoff->callback((Fl_Callback*)cb_filter4_cutoff);
      filter4_cutoff->align(Fl_Align(FL_ALIGN_BOTTOM));
      filter4_cutoff->when(FL_WHEN_CHANGED);
    } // psiDialX* filter4_cutoff
    { Fl_Button* o = midi_learn = new Fl_Button(635, 5, 70, 20, "MIDI Learn");
      midi_learn->tooltip("Activate / deactivate MIDI learn. To map a control, turn on MIDI learn and ch\
ange the value of the control you would like to map. Te next MIDI CC control t\
o be changed will then be mapped to that control.");
      midi_learn->down_box(FL_BORDER_BOX);
      midi_learn->labelsize(10);
      midi_learn->callback((Fl_Callback*)cb_midi_learn);
      o->visible_focus(0);midi_learn_on = 0;
    } // Fl_Button* midi_learn
    { psiLabelBox* o = new psiLabelBox(265, 593, 210, 22, " ");
      o->box(FL_NO_BOX);
      o->color((Fl_Color)40);
      o->selection_color(FL_GRAY0);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)51);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 0, 0, LBL_LEFT,5, 10, BOX_ROUND);
      o->radius=3;
    } // psiLabelBox* o
    { Fl_Button* o = osc1_unison_type = new Fl_Button(290, 5, 65, 20, "Roland");
      osc1_unison_type->tooltip("Select unison method:\n\tRoland - Roland JP8000 unison emulation\n\tExponenti\
al - side oscillator detune is calculated exponentially from the center");
      osc1_unison_type->down_box(FL_BORDER_BOX);
      osc1_unison_type->labelsize(10);
      osc1_unison_type->callback((Fl_Callback*)cb_osc1_unison_type);
      o->visible_focus(0);
    } // Fl_Button* osc1_unison_type
    { Fl_Box* o = new Fl_Box(225, 7, 60, 13, "Unison");
      o->labelsize(9);
      o->labelcolor((Fl_Color)55);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(475, 7, 60, 13, "MIDI Channel");
      o->labelsize(9);
      o->labelcolor((Fl_Color)55);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(365, 7, 50, 13, "Key Split");
      o->labelsize(9);
      o->labelcolor((Fl_Color)55);
    } // Fl_Box* o
    { Fl_Button* o = midi_channel = new Fl_Button(545, 5, 40, 20, "All");
      midi_channel->down_box(FL_BORDER_BOX);
      midi_channel->labelsize(10);
      midi_channel->callback((Fl_Callback*)cb_midi_channel);
      o->visible_focus(0);
    } // Fl_Button* midi_channel
    { Fl_Button* o = key_split = new Fl_Button(420, 5, 40, 20, "Off");
      key_split->tooltip("Incoming notes are split on C-4 between oscillator 1 and osciallator 2");
      key_split->down_box(FL_BORDER_BOX);
      key_split->labelsize(10);
      key_split->callback((Fl_Callback*)cb_key_split);
      o->visible_focus(0);
    } // Fl_Button* key_split
    { Fl_Button* o = btn_midi_mappings = new Fl_Button(710, 5, 70, 20, "Mappings");
      btn_midi_mappings->tooltip("View/delete current MIDI mappings.");
      btn_midi_mappings->down_box(FL_BORDER_BOX);
      btn_midi_mappings->labelsize(10);
      btn_midi_mappings->callback((Fl_Callback*)cb_btn_midi_mappings);
      o->visible_focus(0);
    } // Fl_Button* btn_midi_mappings
    { psiDialX_Mod* o = osc2_phase = new psiDialX_Mod(70, 145, 45, 65, "Phase");
      osc2_phase->box(FL_NO_BOX);
      osc2_phase->color(FL_BACKGROUND_COLOR);
      osc2_phase->selection_color(FL_BACKGROUND_COLOR);
      osc2_phase->labeltype(FL_NORMAL_LABEL);
      osc2_phase->labelfont(0);
      osc2_phase->labelsize(14);
      osc2_phase->labelcolor(FL_FOREGROUND_COLOR);
      osc2_phase->callback((Fl_Callback*)cb_osc2_phase);
      osc2_phase->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      osc2_phase->when(FL_WHEN_RELEASE);
      o->mod_menu(modulation_menu, 15);
      o->single();
      osc2_phase->end();
    } // psiDialX_Mod* osc2_phase
    { psiDialX_Mod* o = osc1_phase = new psiDialX_Mod(70, 50, 45, 65, "Phase");
      osc1_phase->box(FL_NO_BOX);
      osc1_phase->color(FL_BACKGROUND_COLOR);
      osc1_phase->selection_color(FL_BACKGROUND_COLOR);
      osc1_phase->labeltype(FL_NORMAL_LABEL);
      osc1_phase->labelfont(0);
      osc1_phase->labelsize(14);
      osc1_phase->labelcolor(FL_FOREGROUND_COLOR);
      osc1_phase->callback((Fl_Callback*)cb_osc1_phase);
      osc1_phase->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      osc1_phase->when(FL_WHEN_RELEASE);
      o->mod_menu(modulation_menu, 15);
      o->single();
      osc1_phase->end();
    } // psiDialX_Mod* osc1_phase
    { Fl_Output* o = led_display = new Fl_Output(270, 597, 140, 15);
      led_display->box(FL_FLAT_BOX);
      led_display->color((Fl_Color)40);
      led_display->labelfont(13);
      led_display->labelsize(10);
      led_display->labelcolor(FL_GRAY0);
      led_display->textsize(10);
      led_display->textcolor((Fl_Color)180);
      o->value("");o->visible_focus(0);
    } // Fl_Output* led_display
    { Fl_Box* o = led_display2 = new Fl_Box(410, 597, 60, 15);
      led_display2->box(FL_FLAT_BOX);
      led_display2->color(FL_GRAY0);
      led_display2->labelfont(13);
      led_display2->labelsize(10);
      led_display2->labelcolor((Fl_Color)180);
      led_display2->align(Fl_Align(FL_ALIGN_RIGHT));
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* led_display2
    { Fl_Button* o = panic = new Fl_Button(485, 595, 65, 20, "Panic");
      panic->tooltip("Send all notes/sounds off");
      panic->down_box(FL_BORDER_BOX);
      panic->labelsize(10);
      panic->callback((Fl_Callback*)cb_panic);
      o->visible_focus(0);midi_learn_on = 0;
    } // Fl_Button* panic
    { tempo = new Fl_Value_Input(180, 7, 35, 18, "BPM");
      tempo->box(FL_DOWN_BOX);
      tempo->color(FL_BACKGROUND2_COLOR);
      tempo->selection_color(FL_SELECTION_COLOR);
      tempo->labeltype(FL_NORMAL_LABEL);
      tempo->labelfont(0);
      tempo->labelsize(10);
      tempo->labelcolor((Fl_Color)221);
      tempo->maximum(360);
      tempo->step(1);
      tempo->value(120);
      tempo->textsize(10);
      tempo->callback((Fl_Callback*)cb_tempo);
      tempo->align(Fl_Align(FL_ALIGN_LEFT));
      tempo->when(FL_WHEN_CHANGED);
    } // Fl_Value_Input* tempo
    { psiLabelBox* o = new psiLabelBox(725, 437, 40, 172, " ");
      o->box(FL_NO_BOX);
      o->color(FL_LIGHT1);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)51);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->label_align( 0, 0, LBL_LEFT,5, 10, BOX_ROUND);
      o->radius=0.5;
    } // psiLabelBox* o
    { delay_timer = new psiDialX(495, 453, 40, 42, "Delay R");
      delay_timer->box(FL_ROUNDED_BOX);
      delay_timer->color(FL_DARK_RED);
      delay_timer->selection_color(FL_INACTIVE_COLOR);
      delay_timer->labeltype(FL_NORMAL_LABEL);
      delay_timer->labelfont(0);
      delay_timer->labelsize(10);
      delay_timer->labelcolor((Fl_Color)221);
      delay_timer->step(0.01);
      delay_timer->callback((Fl_Callback*)cb_delay_timer);
      delay_timer->align(Fl_Align(FL_ALIGN_BOTTOM));
      delay_timer->when(FL_WHEN_CHANGED);
    } // psiDialX* delay_timer
    { psi::Fader* o = volume = new psi::Fader(735, 450, 20, 140, "Master");
      volume->type(4);
      volume->box(FL_NO_BOX);
      volume->color(FL_BACKGROUND_COLOR);
      volume->selection_color(FL_BACKGROUND_COLOR);
      volume->labeltype(FL_NORMAL_LABEL);
      volume->labelfont(0);
      volume->labelsize(10);
      volume->labelcolor((Fl_Color)221);
      volume->minimum(100);
      volume->maximum(0);
      volume->value(50);
      volume->callback((Fl_Callback*)cb_volume);
      volume->align(Fl_Align(FL_ALIGN_BOTTOM));
      volume->when(FL_WHEN_CHANGED);
      o->visible_focus(0);
    } // psi::Fader* volume
    { Fl_Button* o = delay_split = new Fl_Button(510, 435, 40, 15, "Off");
      delay_split->tooltip("Sync delay to BPM");
      delay_split->down_box(FL_BORDER_BOX);
      delay_split->labelsize(10);
      delay_split->callback((Fl_Callback*)cb_delay_split);
      o->visible_focus(0);
    } // Fl_Button* delay_split
    { Fl_Box* o = new Fl_Box(480, 437, 30, 13, "Split");
      o->labelsize(9);
      o->labelcolor((Fl_Color)221);
    } // Fl_Box* o
    { lfo1 = new psiLFO(5, 315, 190, 90, "LFO1");
      lfo1->box(FL_DOWN_BOX);
      lfo1->color(FL_BACKGROUND_COLOR);
      lfo1->selection_color(FL_BACKGROUND_COLOR);
      lfo1->labeltype(FL_NORMAL_LABEL);
      lfo1->labelfont(0);
      lfo1->labelsize(14);
      lfo1->labelcolor(FL_FOREGROUND_COLOR);
      lfo1->callback((Fl_Callback*)cb_lfo1);
      lfo1->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      lfo1->when(FL_WHEN_RELEASE);
      lfo1->end();
    } // psiLFO* lfo1
    { lfo2 = new psiLFO(200, 315, 190, 90, "LFO2");
      lfo2->box(FL_DOWN_BOX);
      lfo2->color(FL_BACKGROUND_COLOR);
      lfo2->selection_color(FL_BACKGROUND_COLOR);
      lfo2->labeltype(FL_NORMAL_LABEL);
      lfo2->labelfont(0);
      lfo2->labelsize(14);
      lfo2->labelcolor(FL_FOREGROUND_COLOR);
      lfo2->callback((Fl_Callback*)cb_lfo2);
      lfo2->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      lfo2->when(FL_WHEN_RELEASE);
      lfo2->end();
    } // psiLFO* lfo2
    { lfo3 = new psiLFO(395, 315, 190, 90, "LFO3");
      lfo3->box(FL_DOWN_BOX);
      lfo3->color(FL_BACKGROUND_COLOR);
      lfo3->selection_color(FL_BACKGROUND_COLOR);
      lfo3->labeltype(FL_NORMAL_LABEL);
      lfo3->labelfont(0);
      lfo3->labelsize(14);
      lfo3->labelcolor(FL_FOREGROUND_COLOR);
      lfo3->callback((Fl_Callback*)cb_lfo3);
      lfo3->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      lfo3->when(FL_WHEN_RELEASE);
      lfo3->end();
    } // psiLFO* lfo3
    { env1 = new psiENV(590, 30, 190, 90, "AMP ENV1");
      env1->box(FL_DOWN_BOX);
      env1->color(FL_BACKGROUND_COLOR);
      env1->selection_color(FL_BACKGROUND_COLOR);
      env1->labeltype(FL_NORMAL_LABEL);
      env1->labelfont(0);
      env1->labelsize(14);
      env1->labelcolor((Fl_Color)221);
      env1->callback((Fl_Callback*)cb_env1);
      env1->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      env1->when(FL_WHEN_RELEASE);
      env1->end();
    } // psiENV* env1
    { env2 = new psiENV(590, 125, 190, 90, "AMP ENV2");
      env2->box(FL_DOWN_BOX);
      env2->color(FL_BACKGROUND_COLOR);
      env2->selection_color(FL_BACKGROUND_COLOR);
      env2->labeltype(FL_NORMAL_LABEL);
      env2->labelfont(0);
      env2->labelsize(14);
      env2->labelcolor(FL_DARK_GREEN);
      env2->callback((Fl_Callback*)cb_env2);
      env2->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      env2->when(FL_WHEN_RELEASE);
      env2->end();
    } // psiENV* env2
    { env3 = new psiENV(590, 220, 190, 90, "ENV3");
      env3->box(FL_DOWN_BOX);
      env3->color(FL_BACKGROUND_COLOR);
      env3->selection_color(FL_BACKGROUND_COLOR);
      env3->labeltype(FL_NORMAL_LABEL);
      env3->labelfont(0);
      env3->labelsize(14);
      env3->labelcolor(FL_LIGHT2);
      env3->callback((Fl_Callback*)cb_env3);
      env3->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      env3->when(FL_WHEN_RELEASE);
      env3->end();
    } // psiENV* env3
    { env4 = new psiENV(590, 315, 190, 90, "ENV4");
      env4->box(FL_DOWN_BOX);
      env4->color(FL_BACKGROUND_COLOR);
      env4->selection_color(FL_BACKGROUND_COLOR);
      env4->labeltype(FL_NORMAL_LABEL);
      env4->labelfont(0);
      env4->labelsize(14);
      env4->labelcolor(FL_LIGHT2);
      env4->callback((Fl_Callback*)cb_env4);
      env4->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      env4->when(FL_WHEN_RELEASE);
      env4->end();
    } // psiENV* env4
    { psiDialX_Mod* o = filt1_cutoff_mod = new psiDialX_Mod(110, 240, 85, 55, " Mod ");
      filt1_cutoff_mod->box(FL_NO_BOX);
      filt1_cutoff_mod->color(FL_BACKGROUND_COLOR);
      filt1_cutoff_mod->selection_color(FL_BACKGROUND_COLOR);
      filt1_cutoff_mod->labeltype(FL_NORMAL_LABEL);
      filt1_cutoff_mod->labelfont(0);
      filt1_cutoff_mod->labelsize(14);
      filt1_cutoff_mod->labelcolor(FL_FOREGROUND_COLOR);
      filt1_cutoff_mod->callback((Fl_Callback*)cb_filt1_cutoff_mod);
      filt1_cutoff_mod->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      filt1_cutoff_mod->when(FL_WHEN_RELEASE);
      o->mod_menu(modulation_menu, 15);
      o->maximum(100);
      filt1_cutoff_mod->end();
    } // psiDialX_Mod* filt1_cutoff_mod
    { psiDialX_Mod* o = filt2_cutoff_mod = new psiDialX_Mod(400, 240, 85, 55, " Mod ");
      filt2_cutoff_mod->box(FL_NO_BOX);
      filt2_cutoff_mod->color(FL_BACKGROUND_COLOR);
      filt2_cutoff_mod->selection_color(FL_BACKGROUND_COLOR);
      filt2_cutoff_mod->labeltype(FL_NORMAL_LABEL);
      filt2_cutoff_mod->labelfont(0);
      filt2_cutoff_mod->labelsize(14);
      filt2_cutoff_mod->labelcolor(FL_FOREGROUND_COLOR);
      filt2_cutoff_mod->callback((Fl_Callback*)cb_filt2_cutoff_mod);
      filt2_cutoff_mod->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      filt2_cutoff_mod->when(FL_WHEN_RELEASE);
      o->mod_menu(modulation_menu, 15);
      o->maximum(100);
      filt2_cutoff_mod->end();
    } // psiDialX_Mod* filt2_cutoff_mod
    { psiDialX_Mod* o = filt3_cutoff_mod = new psiDialX_Mod(115, 450, 85, 55, " Mod ");
      filt3_cutoff_mod->box(FL_NO_BOX);
      filt3_cutoff_mod->color(FL_BACKGROUND_COLOR);
      filt3_cutoff_mod->selection_color(FL_BACKGROUND_COLOR);
      filt3_cutoff_mod->labeltype(FL_NORMAL_LABEL);
      filt3_cutoff_mod->labelfont(0);
      filt3_cutoff_mod->labelsize(14);
      filt3_cutoff_mod->labelcolor(FL_FOREGROUND_COLOR);
      filt3_cutoff_mod->callback((Fl_Callback*)cb_filt3_cutoff_mod);
      filt3_cutoff_mod->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      filt3_cutoff_mod->when(FL_WHEN_RELEASE);
      o->mod_menu(modulation_menu, 15);
      o->maximum(100);
      filt3_cutoff_mod->end();
    } // psiDialX_Mod* filt3_cutoff_mod
    { psiDialX_Mod* o = filt4_cutoff_mod = new psiDialX_Mod(115, 545, 85, 55, "Mod");
      filt4_cutoff_mod->box(FL_NO_BOX);
      filt4_cutoff_mod->color(FL_BACKGROUND_COLOR);
      filt4_cutoff_mod->selection_color(FL_BACKGROUND_COLOR);
      filt4_cutoff_mod->labeltype(FL_NORMAL_LABEL);
      filt4_cutoff_mod->labelfont(0);
      filt4_cutoff_mod->labelsize(14);
      filt4_cutoff_mod->labelcolor(FL_FOREGROUND_COLOR);
      filt4_cutoff_mod->callback((Fl_Callback*)cb_filt4_cutoff_mod);
      filt4_cutoff_mod->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      filt4_cutoff_mod->when(FL_WHEN_RELEASE);
      o->mod_menu(modulation_menu, 15);
      o->maximum(100);
      filt4_cutoff_mod->end();
    } // psiDialX_Mod* filt4_cutoff_mod
    { psiDialX_Mod* o = pan = new psiDialX_Mod(405, 525, 45, 65, "Panning");
      pan->box(FL_NO_BOX);
      pan->color(FL_BACKGROUND_COLOR);
      pan->selection_color(FL_BACKGROUND_COLOR);
      pan->labeltype(FL_NORMAL_LABEL);
      pan->labelfont(0);
      pan->labelsize(14);
      pan->labelcolor(FL_FOREGROUND_COLOR);
      pan->callback((Fl_Callback*)cb_pan);
      pan->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      pan->when(FL_WHEN_RELEASE);
      o->mod_menu(modulation_menu, 15);
      o->maximum(50);
      o->minimum(-50);
      o->single();
      pan->end();
    } // psiDialX_Mod* pan
    { Fl_Button* o = delay_lock = new Fl_Button(470, 464, 16, 16, " = ");
      delay_lock->tooltip("Sync delay to BPM");
      delay_lock->box(FL_BORDER_BOX);
      delay_lock->labelsize(9);
      delay_lock->labelcolor(FL_LIGHT3);
      delay_lock->callback((Fl_Callback*)cb_delay_lock);
      o->color(FL_GRAY);o->visible_focus(0);
    } // Fl_Button* delay_lock
    { feedback_r = new psiDialX(350, 452, 40, 43, "Amount R");
      feedback_r->box(FL_ROUNDED_BOX);
      feedback_r->color(FL_DARK_RED);
      feedback_r->selection_color(FL_INACTIVE_COLOR);
      feedback_r->labeltype(FL_NORMAL_LABEL);
      feedback_r->labelfont(0);
      feedback_r->labelsize(10);
      feedback_r->labelcolor((Fl_Color)221);
      feedback_r->maximum(100);
      feedback_r->step(0.01);
      feedback_r->callback((Fl_Callback*)cb_feedback_r);
      feedback_r->align(Fl_Align(FL_ALIGN_BOTTOM));
      feedback_r->when(FL_WHEN_CHANGED);
    } // psiDialX* feedback_r
    { Fl_Button* o = delay_fblock = new Fl_Button(324, 464, 16, 16, " = ");
      delay_fblock->tooltip("Sync delay to BPM");
      delay_fblock->box(FL_BORDER_BOX);
      delay_fblock->labelsize(9);
      delay_fblock->labelcolor(FL_LIGHT3);
      delay_fblock->callback((Fl_Callback*)cb_delay_fblock);
      o->color(FL_GRAY);o->visible_focus(0);
    } // Fl_Button* delay_fblock
    Fl_Theme::set( "Vector");
          Fl_Tooltip::color(FL_BLACK);
          Fl_Tooltip::textcolor(221);
          Fl_Tooltip::size(11);
          Fl_Dial::default_style(Fl_Dial::PIXMAP_DIAL);
          Fl_PNG_Image* dial_image = new Fl_PNG_Image( LV2_DIR "/super_welle-psi.lv2/knob.png");
          Fl_Image* dimage = dial_image->copy();
          psiDialX::default_image(dimage);
          midi_learn_on = 0;
          default_draw_value_box = 0;
    window->set_non_modal();
    window->end();
  } // Fl_Double_Window* window
  { midi_mapping_window = new psiMidiMapping(0, 0, 460, 400, "MIDI Mappings");
    midi_mapping_window->box(FL_FLAT_BOX);
    midi_mapping_window->color(FL_BACKGROUND_COLOR);
    midi_mapping_window->selection_color(FL_BACKGROUND_COLOR);
    midi_mapping_window->labeltype(FL_NO_LABEL);
    midi_mapping_window->labelfont(0);
    midi_mapping_window->labelsize(14);
    midi_mapping_window->labelcolor(FL_FOREGROUND_COLOR);
    midi_mapping_window->callback((Fl_Callback*)cb_midi_mapping_window, (void*)(this));
    midi_mapping_window->align(Fl_Align(FL_ALIGN_TOP));
    midi_mapping_window->when(FL_WHEN_RELEASE);
    midi_mapping_window->set_modal();
    midi_mapping_window->size_range(460, 400, 460, 400);
    midi_mapping_window->end();
  } // psiMidiMapping* midi_mapping_window
}

void SuperWelleUI::cb_menu(const Fl_Menu_Item* items, const Fl_Menu_Item* m, Fl_Button* button, int port) {
  if ( !m ) {
            return;
    } 
    const int vals = parameters[port].max + 1;
    for (int i=0; i < vals; ++i) {
        if ( strcmp(items[i].label(), m->label()) == 0 ) {
         writePort(port,(float) i);
           button->label(m->label());    
           return;
        }
    }
    return;
}

void SuperWelleUI::writePort(const int port, const double value, const int sync ) {
  float last_port = port;
      int v_port = port;
      const float sval = voice_param_value(port, value, sync) /
                          parameters[port].scale;
      char s[128];
      char t[128];
      if ( midi_learn_on == 0) {
          
          write_function(controller, port, sizeof(float), 0, &sval);
          write_function(controller,V_LAST_PORT, sizeof(float), 0, &last_port);
          if (parameters[v_port].can_display!=0) {
              
              voice_param_display(v_port, sval, (char*) s, (char*) t, sync);
              led_display->value(t);
              led_display2->copy_label(s);
          } else {
              led_display->value("");
              led_display2->copy_label("");
          }
          led_display->redraw();
          led_display2->redraw();
      } else {
          write_function(controller, port, sizeof(float), 0, &sval);
          write_function(controller,V_LAST_PORT, sizeof(float), 0, &last_port);
          
     }
}

void SuperWelleUI::idle() {
  Fl::check();
  Fl::flush();
}

int SuperWelleUI::getWidth() {
  return window->w();
}

int SuperWelleUI::getHeight() {
  return window->h();
}
